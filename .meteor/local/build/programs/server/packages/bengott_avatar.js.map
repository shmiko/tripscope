{"version":3,"file":"/packages/bengott:avatar.js","sources":["bengott:avatar/export.js","bengott:avatar/helpers.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,+B;AACA,U;;AAEA,4E;AACA,mC;AACA,Y;;AAEA,6E;AACA,mD;AACA,0B;;AAEA,8E;AACA,8E;AACA,yB;;AAEA,oE;AACA,gC;AACA,uE;AACA,wB;;AAEA,iF;AACA,gF;AACA,oF;AACA,gE;AACA,qB;AACA,I;;AAEA,iC;AACA,gC;;AAEA,sB;;AAEA,yD;AACA,gE;;AAEA,kC;AACA,kE;AACA,O;AACA,yC;AACA,oE;AACA,O;AACA,yC;AACA,oE;AACA,O;AACA,K;AACA,yD;AACA,4D;AACA,iD;AACA,S;AACA,K;;AAEA,oB;AACA,I;;AAEA,qC;AACA,2B;;AAEA,iC;;AAEA,iD;;AAEA,mE;AACA,0C;;AAEA,0C;AACA,yE;;AAEA,yB;AACA,yC;AACA,+C;AACA,0C;AACA,uF;AACA,c;AACA,kE;AACA,8B;AACA,2C;AACA,S;AACA,iE;AACA,mC;AACA,gF;AACA,+D;AACA,S;AACA,O;AACA,4B;AACA,8C;AACA,K;;AAEA,e;AACA,iC;AACA,8B;AACA,+D;AACA,uF;AACA,O;AACA,oC;AACA,sC;AACA,+F;AACA,O;AACA,kC;AACA,2C;AACA,O;AACA,kC;AACA,2F;AACA,O;AACA,qC;AACA,sD;AACA,O;AACA,gC;AACA,4B;AACA,kG;AACA,yE;AACA,2D;AACA,S;AACA,c;AACA,kC;AACA,S;;AAEA,uB;AACA,gF;AACA,8E;AACA,+E;AACA,uE;AACA,iD;AACA,2F;AACA,0E;AACA,U;;AAEA,+C;AACA,mF;AACA,O;AACA,K;AACA,U;AACA,uB;AACA,K;;AAEA,e;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;ACxIA,uD;AACA,6D;AACA,8B;AACA,0E;AACA,2E;AACA,yE;AACA,yE;AACA,4E;AACA,uE;AACA,E;;AAEA,6E;AACA,kC;AACA,kB;AACA,yC;AACA,yD;AACA,G;AACA,yB;AACA,iE;AACA,G;AACA,qB;AACA,E","sourcesContent":["// Avatar object to be exported\nAvatar = {\n\n  // If defined (e.g. from a startup config file in your app), these options\n  // override default functionality\n  options: {\n\n    // This property on the user object will be used for retrieving gravatars\n    // (useful when user emails are not published).\n    emailHashProperty: '',\n\n    // This will replace the standard default avatar URL. It can be a relative\n    // path (relative to website's base URL, e.g. 'images/defaultAvatar.png').\n    defaultAvatarUrl: '',\n\n    // Gravatar default option to use (overrides default avatar URL)\n    // Options are available at:\n    // https://secure.gravatar.com/site/implement/images/#default-image\n    gravatarDefault: '',\n\n    // Server base URL. If calling Avatar.getUrl() from the server, this property\n    // is REQUIRED (because server can't call window.location to figure it out).\n    // Also, if this property is defined, it will effectively override the code that\n    // tries to automatically determine your website's base URL.\n    serverBaseUrl: ''\n  },\n\n  // Get the initials of the user\n  getInitials: function (user) {\n\n    var initials = '';\n\n    if (user && user.profile && user.profile.firstName) {\n      initials = user.profile.firstName.charAt(0).toUpperCase();\n\n      if (user.profile.lastName) {\n        initials += user.profile.lastName.charAt(0).toUpperCase();\n      }\n      else if (user.profile.familyName) {\n        initials += user.profile.familyName.charAt(0).toUpperCase();\n      }\n      else if (user.profile.secondName) {\n        initials += user.profile.secondName.charAt(0).toUpperCase();\n      }\n    }\n    else if (user && user.profile && user.profile.name) {\n      user.profile.name.split(' ').forEach(function (part) {\n        initials += part.charAt(0).toUpperCase();\n      });\n    }\n\n    return initials;\n  },\n\n  // Get the url of the user's avatar\n  getUrl: function (user) {\n\n    var url, defaultUrl, baseUrl;\n\n    defaultUrl = Avatar.options.defaultAvatarUrl;\n\n    // If it's a relative path (no '//' anywhere), complete the URL\n    if (defaultUrl.indexOf('//') === -1) {\n\n      // Strip starting slash if it exists\n      if (defaultUrl.charAt(0) === '/') defaultUrl = defaultUrl.slice(1);\n\n      // Get the base URL\n      if (Avatar.options.serverBaseUrl) {\n        baseUrl = Avatar.options.serverBaseUrl;\n        // Strip ending slash if it exists\n        if (baseUrl.charAt(baseUrl.length - 1) === '/') baseUrl = baseUrl.slice(0, -1);\n      } else {\n        // If on the client, figure out the base URL automatically\n        if (Meteor.isClient) {\n          baseUrl = window.location.origin;\n        }\n        // The server will not abide this, man. Warn via console.\n        else if (Meteor.isServer) {\n          console.warn('[bengott:avatar] Cannot generate default avatar URL: ' +\n                       'serverBaseUrl option is not defined.');\n        }\n      }\n      // Put it all together\n      defaultUrl = baseUrl + '/' + defaultUrl;\n    }\n\n    if (user) {\n      var svc = getService(user);\n      if (svc === 'twitter') {\n        // use larger image (200x200 is smallest custom option)\n        url = user.services.twitter.profile_image_url.replace('_normal.', '_200x200.');\n      }\n      else if (svc === 'facebook') {\n        // use larger image (~200x200)\n        url = 'http://graph.facebook.com/' + user.services.facebook.id + '/picture?type=large';\n      }\n      else if (svc === 'google') {\n        url = user.services.google.picture;\n      }\n      else if (svc === 'github') {\n        url = 'http://avatars.githubusercontent.com/u/' + user.services.github.id + '?v=2';\n      }\n      else if (svc === 'instagram') {\n        url = user.services.instagram.profile_picture;\n      }\n      else if (svc === 'none') {\n        var gravatarDefault;\n        var validGravatars = ['404', 'mm', 'identicon', 'monsterid', 'wavatar', 'retro', 'blank'];\n        if (_.contains(validGravatars, Avatar.options.gravatarDefault)) {\n          gravatarDefault = Avatar.options.gravatarDefault;\n        }\n        else {\n          gravatarDefault = '404';\n        }\n\n        var options = {\n          // NOTE: Gravatar's default option requires a publicly accessible URL,\n          // so it won't work when your app is running on localhost and you're\n          // using either the standard default URL or a custom defaultAvatarUrl\n          // that is a relative path (e.g. 'images/defaultAvatar.png').\n          default: gravatarDefault || defaultUrl,\n          size: 200, // use 200x200 like twitter and facebook above (might be useful later)\n          secure: Meteor.isClient && window.location.protocol === 'https:'\n        };\n\n        var emailOrHash = getEmailOrHash(user);\n        url = emailOrHash && Gravatar.imageUrl(emailOrHash, options) || defaultUrl;\n      }\n    }\n    else {\n      url = defaultUrl;\n    }\n\n    return url;\n  }\n};\n","// Get the account service to use for the user's avatar\n// Priority: Twitter > Facebook > Google > GitHub > Instagram\ngetService = function (user) {\n  if      (user.services && user.services.twitter)   { return 'twitter'; }\n  else if (user.services && user.services.facebook)  { return 'facebook'; }\n  else if (user.services && user.services.google)    { return 'google'; }\n  else if (user.services && user.services.github)    { return 'github'; }\n  else if (user.services && user.services.instagram) { return 'instagram'; }\n  else                                               { return 'none'; }\n};\n\n// Get the user's email address or (if the emailHashProperty is defined) hash\ngetEmailOrHash = function (user) {\n  var emailOrHash;\n  if (Avatar.options.emailHashProperty) {\n    emailOrHash = user[Avatar.options.emailHashProperty];\n  }\n  else if (user.emails) {\n    emailOrHash = user.emails[0].address; // TODO: try all emails\n  }\n  return emailOrHash;\n};"]}