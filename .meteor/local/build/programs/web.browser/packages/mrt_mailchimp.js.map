)]}'
{"version":3,"file":"/packages/mrt:mailchimp.js","sources":["mrt:mailchimp/lib/client/views/subscribe/subscribe.html","mrt:mailchimp/lib/client/views/subscribe/subscribe.js","mrt:mailchimp/lib/client/mailchimp.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,2D;AACA,kB;AACA,8C;AACA,kD;AACA,iB;AACA,6B;AACA,wB;AACA,8B;AACA,wD;AACA,iB;AACA,2J;AACA,I;;;;;;;;;;;;;;;;;;;ACZA,mB;AACA,gB;AACA,iB;AACA,iD;AACA,qD;AACA,0C;AACA,6C;AACA,wD;;AAEA,qC;AACA,yB;AACA,sC;AACA,G;AACA,G;;AAEA,kD;AACA,2C;AACA,uK;AACA,iC;AACA,G;;AAEA,oD;AACA,qF;AACA,oC;AACA,yB;AACA,oC;AACA,I;AACA,U;AACA,mC;AACA,uC;AACA,yC;AACA,gC;AACA,oC;AACA,I;AACA,G;AACA,G;;AAEA,uD;AACA,uD;;AAEA,uC;AACA,I;AACA,6C;AACA,Y;AACA,iB;AACA,K;AACA,K;;AAEA,+B;AACA,kB;AACA,6B;AACA,oC;AACA,4C;AACA,a;AACA,2C;AACA,iD;AACA,a;AACA,sC;AACA,+B;AACA,c;AACA,6D;AACA,M;AACA,0F;AACA,Y;AACA,+F;AACA,6C;AACA,qC;AACA,K;;AAEA,oC;AACA,kC;AACA,I;AACA,I;AACA,G;;AAEA,2C;AACA,kC;AACA,kC;AACA,sC;AACA,iD;AACA,2B;AACA,uB;AACA,G;;AAEA,wD;AACA,0C;AACA,wC;AACA,6C;AACA,4D;AACA,E;;AAEA,yC;AACA,sB;AACA,0B;AACA,E;AACA,G;;AAEA,wC;AACA,2D;AACA,4B;AACA,gC;AACA,Q;AACA,G;;AAEA,iC;AACA,+C;AACA,qC;AACA,iC;AACA,0B;AACA,iC;AACA,S;AACA,G;AACA,G;;AAEA,oC;AACA,+C;AACA,yB;AACA,gC;AACA,wD;AACA,oC;AACA,yB;AACA,K;AACA,I;AACA,Q;AACA,G;;AAEA,qC;AACA,+B;AACA,uD;AACA,wB;AACA,G;AACA,E;AACA,G;;;;;;;;;;;;;;;;;;;ACpIA,yC;AACA,4B;AACA,U;AACA,0E;AACA,mB;AACA,G;AACA,E;AACA,C;;AAEA,2E;AACA,kG;AACA,4B;AACA,I;AACA,C","sourcesContent":["\nTemplate.__define__(\"MailChimpListSubscribe\", (function() {\n  var view = this;\n  return HTML.DIV(\"\\n\t\", Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"message\"));\n  }, function() {\n    return [ \"\\n\t\t\", HTML.P({\n      \"class\": \"message\"\n    }, Blaze.View(function() {\n      return Spacebars.mustache(view.lookup(\"message\"));\n    })), \"\\n\t\" ];\n  }), HTML.Raw('\\n\t\t<input class=\"email\" type=\"email\" placeholder=\"email@example.com\">\\n\t\t<button class=\"subscribe\" type=\"button\">Subscribe</button>\\n\t'));\n}));\n","var subscribeTitle,\n\tsubscribeEmail,\n\tsubscribeButton,\n\tsubscribeMessage\t\t\t= 'Get on the mailing list:',\n\tsubscribeInvalidEmail\t\t= 'Invalid email address :(',\n\tsubscribeSubscribing\t\t= 'Subscribing...',\n\tsubscribeSuccess\t\t\t= 'Check your inbox! :)',\n\tsubscribeAlreadySubscribed\t= 'Already subscribed! O.o',\n\n\tshowMessage = function ( message ) {\n\t\tif ( subscribeTitle ) {\n\t\t\tsubscribeTitle.innerHTML = message;\n\t\t}\n\t},\n\n\tisValidEmailAddress = function ( emailAddress ) {\n\t\t// http://stackoverflow.com/a/46181/11236\n\t\tvar re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\t\treturn re.test( emailAddress );\n\t},\n\n\tvalidateEmailAddress = function ( updateMessage ) {\n\t\tif ( subscribeEmail.value !== '' && isValidEmailAddress( subscribeEmail.value ) ) {\n\t\t\tsubscribeButton.disabled = false;\n\t\t\tif ( updateMessage ) {\n\t\t\t\tshowMessage( subscribeMessage );\n\t\t\t}\n\t\t} else {\n\t\t\tsubscribeButton.disabled = true;\n\t\t\tif ( subscribeEmail.value !== '' ) {\n\t\t\t\tshowMessage( subscribeInvalidEmail );\n\t\t\t} else if ( updateMessage ) {\n\t\t\t\tshowMessage( subscribeMessage );\n\t\t\t}\n\t\t}\n\t},\n\n\tmailChimpListSubscribe = function ( email, list_id ) {\n\t\tvar mailChimp = new MailChimp(/* apiKey, options */);\n\n\t\tmailChimp.call( 'lists', 'subscribe',\n\t\t\t{\n\t\t\t\tid: list_id,\t\t// null -> defined @ server\n\t\t\t\temail: {\n\t\t\t\t\temail: email\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tfunction ( error, result ) {\n\t\t\t\tif ( error ) {\n\t\t\t\t\tswitch ( error.error ) {\n\t\t\t\t\t\tcase 232:\t// 'Email_NotExists'\n\t\t\t\t\t\t\tshowMessage( subscribeInvalidEmail );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 214:\t// 'List_AlreadySubscribed'\n\t\t\t\t\t\t\tshowMessage( subscribeAlreadySubscribed );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 200:\t// 'List_DoesNotExist'\n\t\t\t\t\t\t\t// We shouldn't be here!\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tshowMessage( 'Internal error [' + error.error + ']' );\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log( '[MailChimp][Subscribe] Error: ' + error.error + ' - ' + error.reason );\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log( '[MailChimp][Subscribe]: ' + subscribeEmail.value + ' ' + subscribeSuccess );\n\t\t\t\t\tconsole.log( JSON.stringify( result ) );\n\t\t\t\t\tshowMessage( subscribeSuccess );\n\t\t\t\t}\n\n\t\t\t\tsubscribeEmail.disabled = false;\n\t\t\t\tvalidateEmailAddress( false );\n\t\t\t}\n\t\t);\n\t},\n\n\tsubscribeGo = function ( eventBubbling ) {\n\t\tsubscribeEmail.disabled\t\t= true;\n\t\tsubscribeButton.disabled\t= true;\n\t\tshowMessage( subscribeSubscribing );\n\t\tmailChimpListSubscribe( subscribeEmail.value );\n\t\t// Prevent Event Bubbling\n\t\treturn eventBubbling;\n\t};\n\nTemplate.MailChimpListSubscribe.rendered = function () {\n\tsubscribeTitle\t= this.find( '.message' );\n\tsubscribeEmail\t= this.find( '.email' );\n\tsubscribeButton\t= this.find( '.subscribe' );\n\tsubscribeButton.disabled = ( subscribeEmail.value === '' );\n};\n\nTemplate.MailChimpListSubscribe.helpers({\n\tmessage: function() {\n\t\treturn subscribeMessage;\n\t}\n});\n\nTemplate.MailChimpListSubscribe.events({\n\t'focus .email, paste .email, cut .email': function ( e ) {\n\t\tsetTimeout(function( e ) {\n\t\t\tvalidateEmailAddress( true );\n\t\t}, 0);\n\t},\n\n\t'keyup .email': function ( e ) {\n\t\tvar key = e.which || e.keyCode || e.charCode;\n\t\tif ( key === 8 ||\t\t\t\t// [Backspace]\n\t\t\t key === 46\t) {\t\t\t\t// [Delete]\n\t\t\tsetTimeout(function() {\n\t\t\t\tvalidateEmailAddress( true );\n\t\t\t}, 0);\n\t\t}\n\t},\n\n\t'keypress .email': function ( e ) {\n\t\tvar key = e.which || e.keyCode || e.charCode;\n\t\tsetTimeout(function() {\n\t\t\tvalidateEmailAddress( true );\n\t\t\tif ( isValidEmailAddress( subscribeEmail.value  ) ) {\n\t\t\t\tif ( key === 13\t) {\t\t// [Return]\n\t\t\t\t\tsubscribeGo( true );\n\t\t\t\t}\n\t\t\t}\n\t\t}, 0);\n\t},\n\n\t'click .subscribe': function ( e ) {\n\t\tvalidateEmailAddress( true );\n\t\tif ( isValidEmailAddress( subscribeEmail.value  ) ) {\n\t\t\tsubscribeGo( false );\n\t\t}\n\t}\n});\n","MailChimp = function( apiKey, options ) {\n\tthis._options = function(){\n\t\treturn {\n\t\t\tapiKey: ( apiKey ) ? apiKey : Session.get( 'MailChimpOptions.apiKey' ),\n\t\t\toptions: options\n\t\t}\n\t}\n}\n\nMailChimp.prototype.call = function( section, method, options, callback ) {\n\tMeteor.call( 'MailChimp', this._options(), section, method, options, function ( error, result ) {\n\t\tcallback( error, result );\n\t});\n}\n"]}