)]}'
{"version":3,"file":"/packages/telescope-notifications.js","sources":["telescope-notifications/lib/notifications.js","telescope-notifications/lib/herald.js","telescope-notifications/lib/client/templates/notification_item.html","telescope-notifications/lib/client/templates/notification_item.js","telescope-notifications/lib/client/templates/notification_new_comment.html","telescope-notifications/lib/client/templates/notification_new_reply.html","telescope-notifications/lib/client/templates/notifications_menu.html","telescope-notifications/lib/client/templates/notifications_menu.js","telescope-notifications/lib/client/templates/unsubscribe.html","telescope-notifications/lib/client/templates/unsubscribe.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oD;AACA,qD;AACA,sB;AACA,2G;AACA,qB;AACA,O;AACA,wE;AACA,G;AACA,c;AACA,G;;AAEA,0D;AACA,2D;AACA,sB;;AAEA,kD;AACA,6B;AACA,6C;AACA,qD;;AAEA,4B;AACA,kE;AACA,+C;AACA,M;;AAEA,wB;AACA,sB;AACA,4D;AACA,kE;;AAEA,wF;;AAEA,2B;AACA,uF;AACA,oC;AACA,gG;;AAEA,6B;AACA,mG;AACA,yE;AACA,gG;;AAEA,U;AACA,qB;AACA,iD;AACA,kC;AACA,gG;AACA,K;AACA,G;;AAEA,iB;AACA,G;;AAEA,0B;AACA,qC;AACA,mB;AACA,kB;AACA,mB;AACA,uB;AACA,e;AACA,6B;AACA,mG;AACA,K;AACA,G;AACA,C;AACA,6C;;;;;;;;;;;;;;;;;;;ACjEA,4B;AACA,E;AACA,0B;AACA,2B;AACA,0B;AACA,K;;AAEA,8E;AACA,+C;AACA,4C;AACA,U;AACA,2C;AACA,I;AACA,G;;AAEA,4C;AACA,0B;AACA,mE;AACA,iC;AACA,6D;AACA,yF;AACA,Q;AACA,C;;AAEA,iD;AACA,kD;AACA,Y;AACA,+B;AACA,U;AACA,4C;AACA,G;AACA,C;;AAEA,oC;AACA,kD;AACA,Y;AACA,6B;AACA,U;AACA,0B;AACA,K;AACA,C;;AAEA,8B;AACA,U;AACA,Y;AACA,oC;AACA,6C;AACA,+E;AACA,2E;AACA,iD;AACA,O;AACA,K;AACA,G;AACA,0D;AACA,G;;AAEA,iC;AACA,U;AACA,e;AACA,Y;AACA,+B;AACA,K;AACA,I;AACA,Y;AACA,8B;AACA,uD;AACA,8D;AACA,U;AACA,K;AACA,I;AACA,c;AACA,6B;AACA,uD;AACA,M;AACA,iC;AACA,2C;AACA,M;AACA,yB;AACA,0C;AACA,M;AACA,4B;AACA,kC;AACA,M;AACA,sB;AACA,2C;AACA,K;AACA,G;AACA,G;;AAEA,+B;AACA,U;AACA,e;AACA,Y;AACA,+B;AACA,K;AACA,I;AACA,Y;AACA,8B;AACA,sD;AACA,4D;AACA,U;AACA,K;AACA,I;AACA,c;AACA,6B;AACA,uD;AACA,M;AACA,iC;AACA,2C;AACA,M;AACA,yB;AACA,0C;AACA,M;AACA,4B;AACA,kC;AACA,M;AACA,sB;AACA,iD;AACA,K;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;;ACvHA,yC;AACA,sF;AACA,kB;AACA,kB;AACA,yB;AACA,0D;AACA,mD;AACA,qB;AACA,sB;AACA,W;AACA,K;AACA,0B;AACA,qC;AACA,4B;AACA,uD;AACA,2B;AACA,gC;AACA,wC;AACA,kF;AACA,yB;AACA,I;;;;;;;;;;;;;;;;;;;ACrBA,mD;AACA,uB;AACA,4C;AACA,I;AACA,yB;AACA,qB;AACA,I;AACA,+B;AACA,0B;AACA,G;AACA,G;;AAEA,kD;AACA,kD;AACA,yC;AACA,6B;AACA,0B;AACA,K;AACA,Y;AACA,kB;AACA,O;AACA,M;AACA,4B;AACA,gB;AACA,2B;AACA,Q;AACA,K;AACA,M;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;;AC5BA,+C;AACA,kG;AACA,kB;AACA,kC;AACA,sB;AACA,2D;AACA,K;AACA,4B;AACA,qD;AACA,yD;AACA,sB;AACA,+D;AACA,M;AACA,0B;AACA,4B;AACA,wD;AACA,e;AACA,I;;;;;;;;;;;;;;;;;;;;ACjBA,6C;AACA,8F;AACA,kB;AACA,kC;AACA,sB;AACA,2D;AACA,K;AACA,4B;AACA,qD;AACA,8D;AACA,sB;AACA,+D;AACA,M;AACA,0B;AACA,4B;AACA,wD;AACA,e;AACA,I;;;;;;;;;;;;;;;;;;;;ACjBA,0C;AACA,wF;AACA,kB;AACA,8B;AACA,qD;AACA,iB;AACA,iC;AACA,6D;AACA,2B;AACA,0C;AACA,e;AACA,8B;AACA,mE;AACA,+B;AACA,8B;AACA,8B;AACA,mB;AACA,iC;AACA,4C;AACA,6D;AACA,mB;AACA,iD;AACA,kB;AACA,sC;AACA,gC;AACA,uE;AACA,uD;AACA,4D;AACA,qB;AACA,qE;AACA,kB;AACA,qE;AACA,Y;AACA,uB;AACA,+C;AACA,sD;AACA,a;AACA,+B;AACA,2B;AACA,mB;AACA,+E;AACA,wD;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;AC5CA,oD;AACA,iC;AACA,2C;AACA,I;AACA,4B;AACA,mG;AACA,I;AACA,iC;AACA,iH;AACA,I;AACA,iC;AACA,6F;AACA,gC;AACA,wC;AACA,sC;AACA,sC;AACA,U;AACA,8D;AACA,K;AACA,I;AACA,iC;AACA,6F;AACA,+B;AACA,gC;AACA,G;AACA,G;;AAEA,mD;AACA,6C;AACA,uB;AACA,gD;AACA,I;AACA,oC;AACA,8C;AACA,8B;AACA,oC;AACA,O;AACA,M;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;;ACtCA,oC;AACA,4E;AACA,kB;AACA,mB;AACA,iD;AACA,6C;AACA,2D;AACA,e;AACA,I;;;;;;;;;;;;;;;;;;;ACTA,0D;AACA,4B;AACA,+D;AACA,e;AACA,+F;AACA,U;AACA,4D;AACA,K;AACA,K;AACA,sD;AACA,E;;AAEA,8C;AACA,4B;AACA,8E;AACA,gF;AACA,8C;AACA,G;AACA,G","sourcesContent":["// add new post notification callback on post submit\npostAfterSubmitMethodCallbacks.push(function (post) {\n  if(Meteor.isServer){\n    var userIds = Meteor.users.find({'profile.notifications.posts': 1}, {fields: {}}).map(function (user) {\n      return user._id\n    });\n    Herald.createNotification(userIds, {courier: 'newPost', data: post})\n  }\n  return post;\n});\n\n// add new comment notification callback on comment submit\ncommentAfterSubmitMethodCallbacks.push(function (comment) {\n  if(Meteor.isServer){\n\n    var parentCommentId = comment.parentCommentId;\n    var user = Meteor.user();\n    var post = Posts.findOne(comment.postId);\n    var postUser = Meteor.users.findOne(post.userId);\n\n    var notificationData = {\n      comment: _.pick(comment, '_id', 'userId', 'author', 'body'),\n      post: _.pick(post, '_id', 'title', 'url')\n    };\n\n    if(parentCommentId){\n      // child comment\n      var parentComment = Comments.findOne(parentCommentId);\n      var parentUser = Meteor.users.findOne(parentComment.userId);\n\n      notificationData.parentComment = _.pick(parentComment, '_id', 'userId', 'author');\n\n      // reply notification\n      // do not notify users of their own actions (i.e. they're replying to themselves)\n      if(parentUser._id != user._id)\n        Herald.createNotification(parentUser._id, {courier: 'newReply', data: notificationData})\n\n      // comment notification\n      // if the original poster is different from the author of the parent comment, notify them too\n      if(postUser._id != user._id && parentComment.userId != post.userId)\n        Herald.createNotification(postUser._id, {courier: 'newComment', data: notificationData})\n\n    }else{\n      // root comment\n      // don't notify users of their own comments\n      if(postUser._id != user._id)\n        Herald.createNotification(postUser._id, {courier: 'newComment', data: notificationData})\n    }\n  }\n\n  return comment;\n});\n\nvar emailNotifications = {\n  propertyName: 'emailNotifications',\n  propertySchema: {\n    type: Boolean,\n    optional: true,\n    defaultValue: true,\n    autoform: {\n      group: 'notifications',\n      instructions: 'Enable email notifications for new posts and new comments (requires restart).'\n    }\n  }\n}\naddToSettingsSchema.push(emailNotifications);\n","Meteor.startup(function () {\n  \n  Herald.collection.deny({\n    update: ! can.editById,\n    remove: ! can.editById\n  });\n\n  // disable all email notifications when \"emailNotifications\" is set to false\n  if (getSetting('emailNotifications', true)) {\n    Herald.settings.overrides.email = false;\n  } else {\n    Herald.settings.overrides.email = true;\n  };\n});\n\nvar commentEmail = function (userToNotify) {\n  var notification = this;\n  // put in setTimeout so it doesn't hold up the rest of the method\n  Meteor.setTimeout(function () {\n    notificationEmail = buildEmailNotification(notification);\n    sendEmail(getEmail(userToNotify), notificationEmail.subject, notificationEmail.html);\n  }, 1);\n}\n\nvar getCommenterProfileUrl = function (comment) {\n  var user = Meteor.users.findOne(comment.userId);\n  if(user) {\n    return getProfileUrl(user);\n  } else {\n    return getProfileUrlById(comment.userId)\n  }\n}\n\nvar getAuthor = function (comment) {\n  var user = Meteor.users.findOne(comment.userId);\n  if(user) {\n    return getUserName(user);\n  } else {\n    return comment.author;\n  }  \n}\n\nHerald.addCourier('newPost', {\n  media: {\n    email: {\n      emailRunner: function (user) {\n        var p = getPostProperties(this.data);\n        var subject = p.postAuthorName+' has created a new post: '+p.postTitle;\n        var html = buildEmailTemplate(getEmailTemplate('emailNewPost')(p));\n        sendEmail(getEmail(user), subject, html);\n      }\n    }\n  }\n  // message: function (user) { return 'email template?' }\n});\n\nHerald.addCourier('newComment', {\n  media: {\n    onsite: {},\n    email: {\n      emailRunner: commentEmail\n    }\n  },\n  message: {\n    default: function (user) {\n       return Blaze.toHTML(Blaze.With(this, function(){\n        return Template[getTemplate('notificationNewComment')]\n      }));\n    }\n  },\n  transform: {\n    profileUrl: function () {\n      return getCommenterProfileUrl(this.data.comment);\n    },\n    postCommentUrl: function () {\n      return '/posts/'+ this.data.post._id;\n    },\n    author: function () {\n      return getAuthor(this.data.comment);\n    },\n    postTitle: function () {\n      return this.data.post.title;\n    },\n    url: function () {\n      return /comments/ + this.comment._id;\n    }\n  }\n});\n\nHerald.addCourier('newReply', {\n  media: {\n    onsite: {},\n    email: {\n      emailRunner: commentEmail\n    }\n  },\n  message: {\n    default: function (user) {\n      return Blaze.toHTML(Blaze.With(this, function(){\n        return Template[getTemplate('notificationNewReply')]\n      }));\n    }\n  },\n  transform: {\n    profileUrl: function () {\n      return getCommenterProfileUrl(this.data.comment);\n    },\n    postCommentUrl: function () {\n      return '/posts/'+ this.data.post._id;\n    },\n    author: function () {\n      return getAuthor(this.data.comment);\n    },\n    postTitle: function () {\n      return this.data.post.title;\n    },\n    url: function () {\n      return /comments/ + this.parentComment._id;\n    }\n  }\n});\n","\nTemplate.__checkName(\"notificationItem\");\nTemplate[\"notificationItem\"] = new Template(\"Template.notificationItem\", (function() {\n  var view = this;\n  return HTML.LI({\n    \"class\": function() {\n      return [ \"notification-item \", Blaze.If(function() {\n        return Spacebars.call(view.lookup(\"read\"));\n      }, function() {\n        return \"read\";\n      }) ];\n    }\n  }, \"\\n    \", HTML.SPAN({\n    \"class\": \"notification-timestamp\"\n  }, Blaze.View(function() {\n    return Spacebars.mustache(view.lookup(\"niceTime\"));\n  })), \"\\n    \", HTML.DIV({\n    \"class\": \"notification-html\"\n  }, \"\\n      \", Blaze.View(function() {\n    return Spacebars.makeRaw(Spacebars.mustache(view.lookup(\"notificationHTML\")));\n  }), \"\\n    \"), \"\\n  \");\n}));\n","Template[getTemplate('notificationItem')].helpers({\n  niceTime: function(){\n    return moment(this.timestamp).fromNow();\n  },\n  properties: function(){\n    return this.data;\n  },\n  notificationHTML: function(){\n    return this.message();\n  }\n});\n\nTemplate[getTemplate('notificationItem')].events({\n  'click .action-link': function(event, instance){\n    var notificationId=instance.data._id;\n    Herald.collection.update(\n    {_id: notificationId},\n    {\n      $set:{\n        read: true\n      }\n    },\n    function(error, result){\n      if(error){\n        console.log(error);\n      } \n    }\n  );  \n  }\n});\n","\nTemplate.__checkName(\"notificationNewComment\");\nTemplate[\"notificationNewComment\"] = new Template(\"Template.notificationNewComment\", (function() {\n  var view = this;\n  return HTML.P(\"\\n    \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"profileUrl\"));\n    }\n  }, Blaze.View(function() {\n    return Spacebars.mustache(view.lookup(\"author\"));\n  })), \" \\n    left a new comment on    \\n    \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"postCommentUrl\"));\n    },\n    \"class\": \"action-link\"\n  }, Blaze.View(function() {\n    return Spacebars.mustache(view.lookup(\"postTitle\"));\n  })), \"\\n  \");\n}));\n","\nTemplate.__checkName(\"notificationNewReply\");\nTemplate[\"notificationNewReply\"] = new Template(\"Template.notificationNewReply\", (function() {\n  var view = this;\n  return HTML.P(\"\\n    \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"profileUrl\"));\n    }\n  }, Blaze.View(function() {\n    return Spacebars.mustache(view.lookup(\"author\"));\n  })), \"\\n    has replied to your comment on \\n    \", HTML.A({\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"postCommentUrl\"));\n    },\n    \"class\": \"action-link\"\n  }, Blaze.View(function() {\n    return Spacebars.mustache(view.lookup(\"postTitle\"));\n  })), \"\\n  \");\n}));\n","\nTemplate.__checkName(\"notificationsMenu\");\nTemplate[\"notificationsMenu\"] = new Template(\"Template.notificationsMenu\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"isLoggedIn\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"dropdown notifications-menu header-submodule\"\n    }, \"\\n      \", HTML.A({\n      \"class\": \"view  dropdown-top-level\",\n      href: \"/\"\n    }, Blaze.View(function() {\n      return Spacebars.mustache(view.lookup(\"notification_count\"));\n    })), \"\\n      \", HTML.DIV({\n      \"class\": \"dropdown-menu\"\n    }, \"\\n        \", HTML.UL({\n      role: \"menu\",\n      \"aria-labelledby\": \"dLabel\"\n    }, \"\\n          \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"hasNotifications\"));\n    }, function() {\n      return [ \"\\n            \", HTML.LI(HTML.A({\n        href: \"#\",\n        \"class\": \"button mark-as-read\"\n      }, Blaze.View(function() {\n        return Spacebars.mustache(view.lookup(\"i18n\"), \"Mark as read\");\n      }))), \"  \\n            \", Blaze.Each(function() {\n        return Spacebars.call(view.lookup(\"notifications\"));\n      }, function() {\n        return [ \"\\n              \", Blaze._TemplateWith(function() {\n          return {\n            template: Spacebars.call(view.lookup(\"notificationItem\"))\n          };\n        }, function() {\n          return Spacebars.include(function() {\n            return Spacebars.call(Template.__dynamic);\n          });\n        }), \"\\n            \" ];\n      }), \"\\n          \" ];\n    }, function() {\n      return [ \"\\n            \", HTML.LI(\"No notifications\"), \"\\n          \" ];\n    }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \" ];\n  });\n}));\n","Template[getTemplate('notificationsMenu')].helpers({\n  notificationItem: function () {\n    return getTemplate('notificationItem');\n  },\n  notifications: function(){\n    return Herald.collection.find({userId: Meteor.userId(), read: false}, {sort: {timestamp: -1}});\n  },\n  hasNotifications: function () {\n    return !!Herald.collection.find({userId: Meteor.userId(), read: false}, {sort: {timestamp: -1}}).count();    \n  },\n  notification_count: function(){\n    var notifications=Herald.collection.find({userId: Meteor.userId(), read: false}).fetch();\n    if(notifications.length==0){\n      return i18n.t('No notifications');\n    }else if(notifications.length==1){\n      return i18n.t('1 notification');\n    }else{\n      return notifications.length+' '+i18n.t('notifications');\n    }\n  },\n  notification_class: function(){\n    var notifications=Herald.collection.find({userId: Meteor.userId(), read: false}).fetch();\n    if(notifications.length==0)\n      return 'no-notifications';\n  }\n});\n\nTemplate[getTemplate('notificationsMenu')].events({\n  'click .notifications-toggle': function(e){\n    e.preventDefault();\n    $('body').toggleClass('notifications-open');\n  },\n  'click .mark-as-read': function(){\n    Meteor.call('markAllNotificationsAsRead', \n      function(error, result){\n        error && console.log(error);\n      }\n    );\n  }\n});\n","\nTemplate.__checkName(\"unsubscribe\");\nTemplate[\"unsubscribe\"] = new Template(\"Template.unsubscribe\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"grid-small grid-block dialog admin\"\n  }, \"\\n    \", HTML.P(Blaze.View(function() {\n    return Spacebars.mustache(view.lookup(\"unsubscribed\"));\n  })), \"\\n  \");\n}));\n","Template[getTemplate('unsubscribe')].created = function(){\n  var hash = this.data.hash;\n  Meteor.call('unsubscribeUser', hash, function(error, result){\n    if(result){\n      Session.set('unsubscribedMessage', 'You have been unsubscribed from all notifications.');\n    }else{\n      Session.set('unsubscribedMessage', 'User not found.');\n    }\n  });\n  trackEvent('notificationsUnsubcribe', {hash: hash});\n};\n\nTemplate[getTemplate('unsubscribe')].helpers({\n  unsubscribed : function(){\n    // we have to use a session variable because the string we want to display\n    // depends on the return value of an asynchronous callback (unsubscribeUser)\n    return Session.get('unsubscribedMessage');\n  }\n});"]}