)]}'
{"version":3,"file":"/packages/useraccounts:core.js","sources":["useraccounts:core/lib/utils.js","useraccounts:core/lib/field.js","useraccounts:core/lib/core.js","useraccounts:core/lib/client.js","useraccounts:core/lib/templates_helpers/at_error.js","useraccounts:core/lib/templates_helpers/at_form.js","useraccounts:core/lib/templates_helpers/at_input.js","useraccounts:core/lib/templates_helpers/at_nav_button.js","useraccounts:core/lib/templates_helpers/at_oauth.js","useraccounts:core/lib/templates_helpers/at_pwd_form.js","useraccounts:core/lib/templates_helpers/at_pwd_form_btn.js","useraccounts:core/lib/templates_helpers/at_pwd_link.js","useraccounts:core/lib/templates_helpers/at_result.js","useraccounts:core/lib/templates_helpers/at_sep.js","useraccounts:core/lib/templates_helpers/at_signin_link.js","useraccounts:core/lib/templates_helpers/at_signup_link.js","useraccounts:core/lib/templates_helpers/at_social.js","useraccounts:core/lib/templates_helpers/at_terms_link.js","useraccounts:core/lib/templates_helpers/at_title.js","useraccounts:core/lib/methods.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4B;AACA,sD;AACA,E;;AAEA,0B;AACA,6B;AACA,e;AACA,4B;AACA,iC;AACA,uD;AACA,qC;AACA,mD;AACA,0C;AACA,gB;AACA,+B;AACA,S;AACA,K;AACA,E;;;;;;;;;;;;;;;;;;ACjBA,oF;;AAEA,e;;AAEA,oF;;;AAGA,wB;AACA,4B;AACA,4B;;AAEA,6C;AACA,wC;AACA,E;;AAEA,oB;AACA,6C;AACA,qC;AACA,M;AACA,oB;AACA,6C;AACA,oC;AACA,c;AACA,M;;AAEA,2C;AACA,iC;AACA,uB;AACA,+B;AACA,qC;AACA,qB;AACA,8B;AACA,qC;AACA,qB;AACA,mE;AACA,kB;AACA,6B;AACA,uB;AACA,oC;AACA,uB;AACA,oC;AACA,iB;AACA,E;;AAEA,oB;AACA,qD;AACA,kC;AACA,2B;AACA,yC;AACA,gB;AACA,0B;AACA,kB;AACA,M;;AAEA,oB;AACA,qD;AACA,2C;AACA,oC;AACA,oE;AACA,yB;AACA,mC;AACA,2B;AACA,M;;AAEA,uC;AACA,6B;AACA,E;;AAEA,oB;AACA,0D;AACA,qC;AACA,sF;AACA,kC;AACA,uF;AACA,iE;AACA,M;;AAEA,oB;AACA,2C;AACA,4D;AACA,M;;AAEA,oB;AACA,yC;AACA,uD;AACA,wB;AACA,qD;AACA,wB;AACA,uD;AACA,wB;AACA,M;;AAEA,oB;AACA,6C;AACA,sE;AACA,M;;AAEA,oB;AACA,2C;AACA,gC;AACA,sE;AACA,4B;AACA,kE;AACA,8B;AACA,oE;AACA,M;;AAEA,oB;AACA,8C;AACA,qC;AACA,M;;AAEA,oB;AACA,6C;AACA,mD;AACA,0D;AACA,4C;AACA,M;AACA,oB;AACA,6C;AACA,oC;AACA,c;AACA,M;;AAEA,oB;AACA,4C;AACA,sC;AACA,M;AACA,oB;AACA,4C;AACA,oC;AACA,c;AACA,M;;;AAGA,oB;AACA,oD;AACA,8B;AACA,0C;AACA,M;AACA,oB;AACA,oD;AACA,oC;AACA,c;AACA,M;;AAEA,oB;AACA,iE;AACA,uC;AACA,8E;AACA,mB;AACA,S;AACA,oC;AACA,wF;AACA,mB;AACA,S;AACA,+D;AACA,M;;AAEA,oD;AACA,0D;AACA,6B;AACA,uB;AACA,gB;AACA,sB;AACA,gC;AACA,gD;AACA,0C;AACA,wC;AACA,a;AACA,kB;AACA,kC;AACA,0C;AACA,6B;AACA,a;AACA,S;AACA,c;AACA,+B;AACA,sC;AACA,wB;AACA,S;AACA,K;AACA,mC;AACA,mC;AACA,+C;AACA,+D;AACA,kC;AACA,uD;AACA,K;AACA,mC;AACA,+C;AACA,8D;AACA,kC;AACA,sD;AACA,K;AACA,0D;AACA,mC;AACA,kC;AACA,2B;AACA,K;AACA,kC;AACA,sC;AACA,8D;AACA,K;AACA,sB;AACA,8B;AACA,iB;AACA,E;;;;;;;;;;;;;;;;;;;AC/MA,oF;;AAEA,mC;;AAEA,oF;;AAEA,a;AACA,sC;AACA,0C;AACA,sC;AACA,qC;AACA,mC;AACA,mC;AACA,E;;AAEA,c;AACA,2C;AACA,wC;AACA,E;;AAEA,Y;AACA,sC;AACA,0C;AACA,qC;AACA,uC;AACA,8C;AACA,E;;AAEA,mB;AACA,yC;AACA,qC;AACA,uC;AACA,E;;AAEA,gD;AACA,qB;AACA,wC;AACA,6B;AACA,O;AACA,gB;AACA,G;;AAEA,a;AACA,sC;AACA,uC;AACA,sC;AACA,uC;AACA,mC;AACA,gD;AACA,0C;AACA,wC;AACA,yC;AACA,yC;AACA,gC;AACA,2C;AACA,4C;AACA,4C;AACA,2C;AACA,4C;AACA,4C;AACA,sC;AACA,4C;AACA,qD;AACA,yC;AACA,yC;AACA,yC;AACA,uC;AACA,0C;AACA,yC;AACA,qC;AACA,uC;AACA,qC;AACA,E;;AAEA,iD;AACA,c;AACA,gB;AACA,6C;AACA,yC;AACA,kD;AACA,sD;AACA,yD;AACA,iD;AACA,mD;;AAEA,iB;AACA,0C;AACA,mD;AACA,oD;AACA,wC;AACA,8C;AACA,4C;AACA,4C;;AAEA,6B;AACA,kD;AACA,8C;AACA,gD;AACA,gD;AACA,8C;AACA,4C;;AAEA,sC;AACA,uC;AACA,qC;;AAEA,gB;AACA,0C;AACA,4C;;AAEA,qC;AACA,E;;;AAGA,iB;AACA,oC;AACA,sC;AACA,0C;AACA,sC;AACA,qC;AACA,mC;AACA,mC;AACA,E;;;AAGA,gB;AACA,a;AACA,gB;AACA,iB;AACA,sC;AACA,oE;AACA,oE;AACA,+D;AACA,6C;AACA,6C;AACA,+B;AACA,oD;AACA,mC;;AAEA,6B;AACA,kD;AACA,8C;AACA,gD;AACA,gD;AACA,8C;;AAEA,iB;AACA,kC;AACA,uC;AACA,uC;AACA,E;;AAEA,uD;AACA,iB;AACA,iC;AACA,iC;AACA,qC;AACA,2C;AACA,6E;AACA,E;;;AAGA,oF;;AAEA,2B;;AAEA,oF;;;;AAIA,sB;AACA,sB;AACA,sB;;AAEA,c;AACA,iB;;AAEA,E;;;;;AAKA,E;AACA,iE;AACA,uE;AACA,iE;AACA,sG;AACA,gH;AACA,0G;AACA,0F;AACA,0F;AACA,8E;AACA,2E;AACA,sG;AACA,E;;;;AAIA,E;AACA,4G;AACA,oG;AACA,4F;AACA,4F;AACA,kF;AACA,4E;AACA,kH;AACA,E;;;AAGA,gE;AACA,8B;AACA,wE;AACA,uE;AACA,wE;AACA,uE;AACA,gE;AACA,gE;AACA,qE;AACA,E;;;;AAIA,sB;AACA,4B;AACA,e;AACA,Y;AACA,a;AACA,e;AACA,Y;AACA,a;AACA,U;AACA,W;AACA,U;AACA,E;;AAEA,+B;AACA,wB;AACA,iB;AACA,+B;AACA,iC;AACA,kC;AACA,qB;AACA,2B;;AAEA,gB;AACA,0B;AACA,2B;AACA,gC;AACA,uC;AACA,8B;AACA,iC;;AAEA,6B;AACA,kC;AACA,8B;AACA,gC;AACA,gC;AACA,8B;AACA,4B;;AAEA,sC;AACA,0B;AACA,wB;;AAEA,gB;AACA,uB;AACA,uC;AACA,E;;AAEA,+B;AACA,qB;AACA,yB;AACA,E;;AAEA,yB;AACA,wB;AACA,e;AACA,qB;AACA,sB;AACA,uB;AACA,wB;AACA,mB;AACA,O;AACA,e;AACA,wB;AACA,yB;AACA,uB;AACA,qB;AACA,sB;AACA,gC;AACA,qC;AACA,oC;AACA,U;AACA,sB;AACA,gC;AACA,qC;AACA,oC;AACA,U;AACA,O;AACA,E;;AAEA,oB;AACA,yB;;AAEA,kC;;AAEA,wB;AACA,kD;AACA,qD;AACA,E;;AAEA,yC;AACA,qD;AACA,0B;AACA,+G;AACA,6C;AACA,4B;AACA,yD;AACA,kE;AACA,4E;AACA,2B;AACA,4C;AACA,oD;AACA,kD;AACA,uE;AACA,wE;AACA,kD;AACA,uE;AACA,wE;AACA,6D;AACA,8H;AACA,mF;;AAEA,yE;AACA,4C;AACA,wB;AACA,E;;AAEA,2C;AACA,W;AACA,0E;AACA,wD;AACA,iB;AACA,qF;AACA,K;AACA,a;AACA,sC;AACA,iC;AACA,iB;AACA,U;AACA,qF;AACA,wB;AACA,E;;AAEA,2C;AACA,kE;AACA,0B;AACA,4F;;AAEA,wC;AACA,8B;AACA,0C;AACA,qD;;AAEA,yB;AACA,2C;AACA,0B;AACA,qC;AACA,8G;AACA,6D;;AAEA,+B;AACA,oD;AACA,gF;AACA,a;AACA,+B;AACA,oD;AACA,gF;AACA,a;AACA,6B;AACA,kD;AACA,0E;AACA,a;AACA,mC;AACA,wD;AACA,4F;AACA,a;AACA,oC;AACA,yD;AACA,+F;AACA,a;AACA,8B;AACA,mD;AACA,6E;AACA,a;AACA,S;AACA,K;AACA,E;;AAEA,wD;AACA,yB;AACA,sD;AACA,iE;AACA,0B;AACA,+F;AACA,4C;AACA,uC;AACA,0C;;AAEA,qD;AACA,4D;AACA,mC;AACA,0C;AACA,K;AACA,wC;AACA,mE;AACA,iC;AACA,E;;AAEA,2C;AACA,oC;AACA,E;;AAEA,2C;AACA,uD;AACA,oC;AACA,O;AACA,uD;AACA,E;;AAEA,qC;AACA,wB;AACA,E;;AAEA,uC;AACA,wC;AACA,E;;AAEA,6C;AACA,6B;AACA,uC;AACA,gB;AACA,E;;AAEA,6C;AACA,6B;AACA,uC;AACA,e;AACA,E;;AAEA,wC;AACA,2C;AACA,c;AACA,wB;AACA,wE;AACA,Q;AACA,8G;AACA,4C;AACA,gC;AACA,2C;AACA,mG;;AAEA,2F;AACA,+C;AACA,gB;AACA,uB;AACA,6D;AACA,U;AACA,O;;AAEA,4D;AACA,wD;AACA,gF;;AAEA,4E;AACA,2B;AACA,wD;AACA,sC;AACA,W;AACA,K;;AAEA,6B;AACA,oD;AACA,2B;AACA,O;;AAEA,oB;AACA,E;;AAEA,8C;AACA,uD;AACA,0B;AACA,kH;AACA,gD;AACA,iE;AACA,qB;AACA,gD;AACA,Q;AACA,2E;AACA,8E;AACA,E;;AAEA,uC;AACA,yB;AACA,kH;AACA,4G;AACA,oI;AACA,iD;AACA,oD;AACA,mF;AACA,0D;AACA,sE;AACA,c;AACA,S;AACA,iD;AACA,yD;AACA,6F;AACA,0D;AACA,2E;AACA,c;AACA,S;AACA,+C;AACA,uD;AACA,yF;AACA,wD;AACA,yE;AACA,c;AACA,S;AACA,K;;AAEA,sG;AACA,iG;;AAEA,8D;AACA,qF;AACA,iG;AACA,uF;AACA,mG;AACA,wF;AACA,oG;AACA,0F;AACA,uG;AACA,6H;AACA,S;;AAEA,uD;AACA,uD;AACA,4D;AACA,qE;;AAEA,wC;AACA,6E;AACA,mC;AACA,wC;AACA,oC;AACA,+B;AACA,uC;AACA,mD;AACA,gD;AACA,0D;AACA,oC;AACA,sB;AACA,+C;AACA,4D;AACA,2D;AACA,oE;AACA,iE;AACA,sF;AACA,uH;AACA,+B;AACA,2B;AACA,sB;AACA,wC;AACA,uD;AACA,sB;AACA,mB;AACA,gB;AACA,oC;AACA,+B;AACA,uC;AACA,mD;AACA,uC;AACA,8E;AACA,oC;AACA,sB;AACA,gD;AACA,0D;AACA,oC;AACA,sB;AACA,wC;AACA,uD;AACA,4D;AACA,qB;AACA,mB;AACA,S;AACA,Y;AACA,gC;AACA,2B;AACA,mC;AACA,+C;AACA,4C;AACA,6D;AACA,oE;AACA,wB;AACA,0D;AACA,gC;AACA,kB;AACA,oC;AACA,mD;AACA,iB;AACA,e;AACA,O;AACA,E;;;;;;;;;;;;;;;;;;;ACpmBA,wC;AACA,uB;AACA,mC;AACA,0C;AACA,mC;AACA,gC;AACA,iC;AACA,wB;AACA,wB;AACA,wC;AACA,E;;AAEA,6B;;AAEA,oD;AACA,8B;;AAEA,6D;AACA,+B;;AAEA,sE;AACA,2C;AACA,mC;;AAEA,sB;AACA,a;AACA,wC;AACA,uC;AACA,oC;AACA,gC;AACA,yB;AACA,yB;AACA,M;AACA,a;AACA,2D;AACA,2C;AACA,M;AACA,wB;AACA,0B;AACA,W;AACA,oC;AACA,4C;AACA,2C;AACA,uC;AACA,+B;AACA,2G;AACA,M;AACA,iB;AACA,8C;AACA,kC;AACA,gC;AACA,M;AACA,8B;AACA,oB;AACA,mC;AACA,qB;AACA,c;AACA,gD;AACA,8B;AACA,wB;AACA,wC;AACA,8B;AACA,wB;AACA,qB;AACA,iC;AACA,kB;AACA,0C;AACA,M;AACA,2B;AACA,2B;AACA,2B;AACA,uB;AACA,gC;AACA,kC;AACA,oB;AACA,wB;AACA,Y;AACA,oC;AACA,uC;AACA,uC;AACA,sC;AACA,yB;AACA,gC;AACA,M;AACA,E;;AAEA,iE;AACA,8B;;AAEA,mE;AACA,+B;;AAEA,8E;AACA,gC;;AAEA,mB;AACA,8C;AACA,0C;AACA,E;;AAEA,sC;AACA,2B;AACA,E;;AAEA,mC;AACA,uC;AACA,0B;AACA,E;;AAEA,mC;AACA,8C;AACA,2B;AACA,6B;AACA,E;;AAEA,2B;AACA,oC;AACA,wC;AACA,E;;AAEA,+C;AACA,iD;AACA,U;AACA,6B;AACA,wB;AACA,I;AACA,E;;AAEA,4B;AACA,oC;AACA,6E;AACA,E;;AAEA,4B;AACA,4C;AACA,0B;AACA,kD;AACA,E;;AAEA,2B;AACA,mD;AACA,yB;AACA,mC;AACA,4H;AACA,wC;AACA,sB;AACA,+B;AACA,mB;AACA,E;;AAEA,sC;AACA,yC;AACA,4B;AACA,O;AACA,+B;AACA,4B;AACA,6B;AACA,E;;AAEA,sC;AACA,4B;AACA,E;;AAEA,uC;AACA,6B;AACA,E;;AAEA,0C;AACA,yB;AACA,4D;AACA,sF;AACA,oE;AACA,6D;AACA,W;AACA,+C;AACA,6E;AACA,8G;AACA,6D;AACA,6B;AACA,Y;AACA,oB;AACA,K;AACA,E;;AAEA,iB;;AAEA,iB;AACA,gC;AACA,2H;AACA,E;;AAEA,iC;AACA,0B;AACA,e;;AAEA,oD;AACA,8C;AACA,yC;AACA,+C;AACA,K;AACA,S;AACA,4B;AACA,yC;AACA,Y;AACA,sC;AACA,K;;AAEA,kD;AACA,6D;AACA,gC;AACA,iD;AACA,2B;AACA,0C;AACA,6B;AACA,+C;AACA,+C;AACA,+B;AACA,e;AACA,K;;AAEA,qD;AACA,sC;AACA,yD;AACA,gC;AACA,8C;AACA,8D;AACA,4C;AACA,oC;AACA,yC;AACA,8C;AACA,6C;AACA,c;AACA,oC;AACA,yC;AACA,8C;AACA,6C;AACA,c;AACA,oC;AACA,S;AACA,K;AACA,S;AACA,4C;AACA,wH;AACA,K;;AAEA,uD;AACA,4B;AACA,2C;AACA,+C;AACA,2B;AACA,wC;AACA,iC;AACA,+C;AACA,+C;AACA,+B;AACA,e;AACA,K;;AAEA,gD;AACA,wE;AACA,uD;AACA,mE;AACA,qE;AACA,8B;AACA,mB;AACA,sD;AACA,kE;AACA,2B;AACA,mB;AACA,4D;AACA,gC;AACA,wE;AACA,sE;AACA,+D;AACA,+E;AACA,2E;AACA,S;AACA,M;AACA,gD;AACA,iB;AACA,c;AACA,2B;AACA,iB;AACA,uB;AACA,M;AACA,2C;AACA,wD;AACA,qD;AACA,sD;AACA,oD;;;AAGA,oE;AACA,6E;AACA,6E;AACA,qE;AACA,iF;AACA,yE;AACA,yE;AACA,yC;AACA,qB;AACA,2B;AACA,oC;AACA,8C;AACA,sB;AACA,yB;AACA,wD;AACA,8D;AACA,iD;AACA,sB;AACA,4B;AACA,+F;AACA,sB;AACA,kC;AACA,qF;AACA,sB;AACA,4B;AACA,2C;AACA,iE;AACA,iD;AACA,sB;AACA,sC;AACA,mC;AACA,2E;AACA,iD;AACA,sB;AACA,oB;AACA,2C;AACA,S;;AAEA,qB;AACA,0D;AACA,6C;AACA,2D;AACA,0D;AACA,6C;AACA,2D;AACA,gF;AACA,qD;AACA,+D;AACA,oF;AACA,iD;AACA,uD;AACA,iD;AACA,uD;AACA,0E;AACA,0B;AACA,kD;AACA,yC;AACA,mD;;AAEA,O;;AAEA,kC;AACA,8B;AACA,gC;AACA,gC;AACA,6B;AACA,4B;AACA,kB;AACA,mB;AACA,M;;AAEA,4F;AACA,4C;AACA,mD;AACA,K;;AAEA,mB;AACA,oB;AACA,mB;;AAEA,yE;AACA,8D;;AAEA,6C;AACA,8B;AACA,yC;AACA,mD;AACA,wE;AACA,2D;AACA,oD;AACA,W;AACA,O;;AAEA,gC;AACA,oC;;AAEA,6C;AACA,6B;AACA,E;;AAEA,yC;AACA,qC;AACA,e;AACA,yF;AACA,0C;AACA,Q;AACA,gC;AACA,6D;AACA,W;AACA,E;;AAEA,iC;AACA,oB;AACA,gE;AACA,sB;AACA,iC;AACA,E;;AAEA,kD;AACA,wC;AACA,gD;AACA,S;AACA,mG;AACA,sB;AACA,uC;AACA,2B;AACA,gB;AACA,oC;AACA,c;AACA,+D;AACA,6B;AACA,wC;AACA,iB;AACA,4E;AACA,kC;AACA,6C;AACA,a;AACA,S;AACA,K;AACA,E;;AAEA,gE;AACA,gB;AACA,qC;AACA,qF;AACA,2D;AACA,oE;AACA,e;AACA,a;AACA,uG;AACA,6D;AACA,S;AACA,6C;AACA,K;AACA,S;AACA,sB;AACA,oB;AACA,0F;AACA,4E;AACA,oC;AACA,6C;AACA,yD;AACA,gE;AACA,oC;AACA,S;AACA,wB;AACA,iD;AACA,wD;AACA,S;AACA,K;AACA,E;;AAEA,6B;;;AAGA,iB;AACA,0B;AACA,8B;AACA,G;;;;;;;;;;;;;;;;;;;ACtdA,+B;AACA,uB;AACA,yD;AACA,M;AACA,0B;AACA,uB;AACA,wB;AACA,6D;AACA,yD;AACA,S;AACA,Y;AACA,+D;;AAEA,kF;AACA,uD;AACA,oC;;AAEA,kB;AACA,sC;AACA,mB;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;;ACrBA,8B;AACA,qB;AACA,+D;AACA,gC;AACA,M;AACA,oC;AACA,6E;AACA,6E;AACA,yB;AACA,oB;AACA,mF;AACA,M;AACA,4C;AACA,6E;AACA,wD;AACA,yB;AACA,yD;AACA,6B;AACA,yB;AACA,0B;AACA,mE;AACA,oB;AACA,M;AACA,gD;AACA,oE;AACA,6E;AACA,oE;AACA,sG;AACA,M;AACA,qC;AACA,2D;AACA,M;AACA,sC;AACA,4D;AACA,M;AACA,uC;AACA,uD;AACA,yB;AACA,6E;AACA,+E;AACA,yB;AACA,oB;AACA,M;AACA,yC;AACA,qD;AACA,yB;AACA,6E;AACA,6D;AACA,kC;AACA,M;AACA,yC;AACA,sD;AACA,yB;AACA,6E;AACA,2I;AACA,M;AACA,wC;AACA,6E;AACA,mH;AACA,wB;AACA,U;AACA,gC;AACA,wE;AACA,4B;AACA,4B;AACA,S;AACA,U;AACA,qB;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;;ACrEA,0C;AACA,gC;AACA,+D;AACA,sB;AACA,+D;AACA,E;;AAEA,+B;AACA,0B;AACA,4C;AACA,M;AACA,4B;AACA,oD;AACA,M;AACA,6B;AACA,gD;AACA,qF;AACA,qD;AACA,yD;AACA,M;AACA,6B;AACA,+F;AACA,M;AACA,8B;AACA,qC;AACA,qC;AACA,mC;AACA,mC;AACA,kC;AACA,kC;AACA,mC;AACA,mC;AACA,6B;AACA,M;AACA,uB;AACA,0B;AACA,mD;AACA,oC;AACA,4C;AACA,sB;AACA,qB;AACA,W;AACA,M;AACA,2B;AACA,mC;AACA,iD;AACA,M;AACA,6B;AACA,yD;AACA,oD;AACA,yF;AACA,yD;AACA,6D;AACA,S;AACA,M;AACA,E;;AAEA,8B;AACA,yC;AACA,sC;AACA,6B;AACA,mB;AACA,gD;AACA,qF;AACA,sC;AACA,+B;AACA,mB;AACA,+B;AACA,wC;AACA,4C;AACA,2C;AACA,+B;AACA,oC;AACA,iD;AACA,mD;AACA,wD;AACA,iF;AACA,S;AACA,6B;AACA,M;AACA,sC;AACA,iD;AACA,uC;AACA,mB;AACA,gD;AACA,qF;AACA,sC;AACA,+B;AACA,mB;AACA,+B;AACA,wC;AACA,4C;AACA,2C;AACA,+B;AACA,oC;AACA,iD;AACA,mD;AACA,wD;AACA,iF;AACA,S;AACA,6B;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;;ACtGA,mC;AACA,qB;AACA,yG;AACA,iD;AACA,K;AACA,E;;AAEA,kC;AACA,4C;AACA,0B;AACA,uC;AACA,Y;AACA,kC;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;ACdA,+B;AACA,8B;AACA,iD;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;ACJA,iC;AACA,0B;AACA,4C;AACA,M;AACA,wB;AACA,+C;AACA,qF;AACA,oE;AACA,gD;AACA,W;AACA,M;AACA,wC;AACA,+C;AACA,qF;AACA,sF;AACA,M;AACA,E;;AAEA,gC;AACA,kB;AACA,+C;AACA,+B;AACA,4B;;AAEA,4C;;AAEA,+C;AACA,qF;AACA,iD;;AAEA,qC;AACA,kC;AACA,kF;AACA,0B;AACA,8B;AACA,yB;AACA,8D;AACA,+C;AACA,kD;AACA,uB;;AAEA,oC;AACA,6C;AACA,iD;AACA,+C;AACA,mC;AACA,yC;AACA,oD;AACA,0C;;AAEA,8E;AACA,8D;AACA,oE;AACA,oC;AACA,iD;AACA,sD;AACA,yB;AACA,uF;AACA,yD;AACA,sC;AACA,0D;AACA,8C;AACA,2B;AACA,qB;AACA,qC;AACA,iB;AACA,oB;AACA,uC;AACA,a;AACA,W;AACA,kC;AACA,uC;AACA,wC;AACA,+B;AACA,uB;AACA,+B;AACA,mE;AACA,iD;AACA,mB;AACA,S;;AAEA,6C;AACA,yD;AACA,mC;AACA,yC;AACA,qD;AACA,yC;AACA,6D;AACA,gE;AACA,yC;AACA,8B;AACA,iC;AACA,uC;AACA,iC;AACA,2C;;AAEA,uD;AACA,iD;AACA,+D;AACA,6E;AACA,iD;AACA,mF;AACA,oB;AACA,gE;AACA,0D;AACA,uE;AACA,wB;AACA,qD;AACA,uB;AACA,a;AACA,S;;AAEA,kB;AACA,kB;AACA,kB;AACA,iC;AACA,mC;AACA,8B;AACA,8B;AACA,sB;AACA,+C;AACA,8B;AACA,qD;AACA,wC;AACA,mD;AACA,gB;AACA,+B;;AAEA,oF;AACA,mC;AACA,qD;AACA,uB;AACA,a;;AAEA,sF;AACA,+D;AACA,e;AACA,S;;AAEA,kB;AACA,kB;AACA,kB;AACA,iC;AACA,gE;AACA,sD;AACA,mC;AACA,6B;AACA,+B;AACA,kC;AACA,+B;AACA,8E;AACA,+H;AACA,mH;AACA,0D;AACA,8E;AACA,+D;AACA,kE;AACA,uC;AACA,oD;AACA,gE;AACA,2B;AACA,6D;AACA,+B;AACA,qB;AACA,sC;AACA,8B;AACA,uD;AACA,sC;AACA,6D;AACA,wB;AACA,2D;AACA,uF;AACA,kF;AACA,iE;AACA,2B;AACA,uB;AACA,mB;AACA,e;AACA,S;;AAEA,0B;AACA,0B;AACA,0B;AACA,mC;AACA,4C;AACA,4B;AACA,gC;AACA,0E;AACA,uG;AACA,mD;AACA,mB;AACA,e;AACA,S;;AAEA,0C;AACA,0C;AACA,0C;AACA,gE;AACA,mG;AACA,0E;AACA,qC;AACA,6C;AACA,0G;AACA,0C;AACA,wG;AACA,sD;AACA,kE;AACA,gE;AACA,mB;AACA,e;AACA,S;;AAEA,0B;AACA,0B;AACA,0B;AACA,mC;AACA,wF;AACA,0E;AACA,wG;AACA,8D;AACA,sD;AACA,kE;AACA,gE;AACA,mB;AACA,e;AACA,S;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;;ACnOA,oC;AACA,+B;AACA,0E;AACA,oC;AACA,W;AACA,2B;AACA,8B;AACA,M;AACA,4B;AACA,+C;AACA,qF;AACA,mF;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;;ACbA,iC;AACA,0B;AACA,4C;AACA,M;AACA,8B;AACA,2D;AACA,M;AACA,wB;AACA,iF;AACA,M;AACA,yB;AACA,kF;AACA,M;AACA,yB;AACA,kF;AACA,M;AACA,E;;AAEA,gC;AACA,+C;AACA,+B;AACA,iD;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;ACvBA,gC;AACA,wB;AACA,oE;AACA,uB;AACA,4D;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;ACNA,6B;AACA,wB;AACA,yE;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;ACJA,oC;AACA,0B;AACA,4C;AACA,M;AACA,2B;AACA,wD;AACA,M;AACA,wB;AACA,oF;AACA,M;AACA,yB;AACA,qF;AACA,M;AACA,yB;AACA,qF;AACA,M;AACA,E;;AAEA,mC;AACA,4C;AACA,+B;AACA,8C;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;ACvBA,oC;AACA,0B;AACA,4C;AACA,M;AACA,2B;AACA,wD;AACA,M;AACA,wB;AACA,oF;AACA,M;AACA,yB;AACA,qF;AACA,M;AACA,yB;AACA,qF;AACA,M;AACA,E;;AAEA,mC;AACA,4C;AACA,+B;AACA,8C;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;ACvBA,gC;AACA,0B;AACA,yC;AACA,8B;AACA,iC;AACA,kB;AACA,gC;AACA,8B;AACA,iF;AACA,6D;AACA,kC;AACA,S;AACA,M;AACA,qB;AACA,wB;AACA,M;AACA,2B;AACA,+D;AACA,gB;AACA,qC;AACA,kB;AACA,M;AACA,4B;AACA,2B;AACA,mC;AACA,+C;AACA,mC;AACA,8C;AACA,gC;AACA,6G;AACA,4E;AACA,iC;AACA,mC;AACA,0D;AACA,qF;AACA,sC;AACA,uC;AACA,oB;AACA,kH;AACA,kB;AACA,+G;AACA,S;AACA,gD;AACA,qF;AACA,yC;AACA,gF;AACA,+E;AACA,mH;AACA,M;AACA,E;;AAEA,+B;AACA,wC;AACA,+B;AACA,gC;AACA,yC;AACA,mB;AACA,iC;AACA,8D;AACA,iF;AACA,kC;AACA,uB;AACA,iB;AACA,oD;AACA,yE;AACA,yD;AACA,mB;AACA,a;AACA,gB;AACA,gD;AACA,oD;AACA,yF;AACA,uC;AACA,2B;AACA,mD;AACA,+D;AACA,gB;AACA,mE;AACA,sD;AACA,yB;AACA,8B;AACA,2E;AACA,sG;AACA,iB;AACA,4E;AACA,wG;AACA,iB;AACA,a;AACA,qD;AACA,qD;AACA,yE;AACA,iC;AACA,iB;AACA,kF;AACA,sD;AACA,2F;AACA,iB;AACA,oB;AACA,iE;AACA,e;AACA,S;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;;ACtGA,mC;AACA,0B;AACA,4C;AACA,M;AACA,qB;AACA,mF;AACA,M;AACA,2B;AACA,oD;AACA,M;AACA,gC;AACA,kF;AACA,M;AACA,6B;AACA,8F;AACA,M;AACA,oB;AACA,8E;AACA,M;AACA,yB;AACA,kD;AACA,M;AACA,8B;AACA,gF;AACA,M;AACA,E;;AAEA,kC;AACA,gC;AACA,yC;AACA,mC;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;AChCA,+B;AACA,sB;AACA,+C;AACA,qF;AACA,kF;AACA,M;AACA,E;;;;;;;;;;;;;;;;;;;ACLA,gB;AACA,4C;AACA,iC;AACA,oB;AACA,oD;AACA,iF;AACA,kC;AACA,0F;AACA,2B;AACA,mD;AACA,yD;AACA,S;AACA,M;AACA,G;;;AAGA,sB;AACA,oB;AACA,8C;AACA,sE;AACA,4F;AACA,+C;AACA,mC;AACA,8D;AACA,sD;AACA,0C;AACA,mD;AACA,uE;AACA,sC;AACA,8C;AACA,iC;AACA,uD;AACA,8B;AACA,iD;AACA,iC;AACA,uD;AACA,sC;AACA,kC;;AAEA,sC;AACA,kE;AACA,wC;AACA,gD;AACA,4C;AACA,kD;AACA,6E;AACA,iE;AACA,yC;AACA,2B;AACA,iB;AACA,oE;AACA,oC;AACA,8D;AACA,qC;AACA,iB;AACA,e;AACA,0B;AACA,mF;;AAEA,iD;AACA,2C;AACA,uC;;AAEA,yD;AACA,sD;AACA,oF;AACA,yE;AACA,yB;AACA,wE;;AAEA,qF;AACA,kE;AACA,iF;AACA,sE;AACA,U;AACA,O;AACA,C","sourcesContent":["capitalize = function(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nsignedInAs =  function() {\n    var user = Meteor.user();\n    if (user) {\n        if (user.username) {\n            return user.username;\n        } else if (user.profile && user.profile.name) {\n            return user.profile.name;\n        } else if (user.emails && user.emails[0]) {\n            return user.emails[0].address;\n        } else {\n            return \"Signed In\";\n        }\n    }\n};","// ---------------------------------------------------------------------------------\n\n// Field object\n\n// ---------------------------------------------------------------------------------\n\n\nField = function(field){\n    check(field, FIELD_PAT);\n    _.defaults(this, field);\n\n    this.validating = new ReactiveVar(false);\n    this.status = new ReactiveVar(null);\n};\n\nif (Meteor.isClient)\n    Field.prototype.clearStatus = function(){\n        return this.status.set(null);\n    };\nif (Meteor.isServer)\n    Field.prototype.clearStatus = function(){\n        // Nothing to do server-side\n        return\n    };\n\nField.prototype.fixValue = function(value){\n    if (this.type === \"checkbox\")\n        return !!value;\n    if (this.type === \"select\")\n        // TODO: something working...\n        return value;\n    if (this.type === \"radio\")\n        // TODO: something working...\n        return value;\n    // Possibly applies required transformations to the input value\n    if (this.trim)\n        value = value.trim();\n    if (this.lowercase)\n        value = value.toLowerCase();\n    if (this.uppercase)\n        value = value.toUpperCase();\n    return value;\n};\n\nif (Meteor.isClient)\n    Field.prototype.getDisplayName = function(state){\n        var dN = this.displayName;\n        if (_.isObject(dN))\n            dN = dN[state] || dN.default;\n        if (!dN)\n            dN = this._id;\n        return dN;\n    };\n\nif (Meteor.isClient)\n    Field.prototype.getPlaceholder = function(state){\n        var placeholder = this.placeholder;\n        if (_.isObject(placeholder))\n            placeholder = placeholder[state] || placeholder.default;\n        if (!placeholder)\n            placeholder = this._id;\n        return placeholder;\n    };\n\nField.prototype.getStatus = function(){\n    return this.status.get();\n};\n\nif (Meteor.isClient)\n    Field.prototype.getValue = function(tempalteInstance){\n        if (this.type === \"checkbox\")\n            return !!(tempalteInstance.$(\"#at-field-\" + this._id + \":checked\").val());\n        if (this.type === \"radio\")\n            return tempalteInstance.$(\"[name=at-field-\"+ this._id + \"]:checked\").val();\n        return tempalteInstance.$(\"#at-field-\" + this._id).val();\n    };\n\nif (Meteor.isClient)\n    Field.prototype.hasError = function() {\n        return this.negativeValidation && this.status.get();\n    };\n\nif (Meteor.isClient)\n    Field.prototype.hasIcon = function(){\n        if (this.showValidating && this.isValidating())\n            return true;\n        if (this.negativeFeedback && this.hasError())\n            return true;\n        if (this.positiveFeedback && this.hasSuccess())\n            return true;\n    };\n\nif (Meteor.isClient)\n    Field.prototype.hasSuccess = function() {\n        return this.positiveValidation && this.status.get() === false;\n    };\n\nif (Meteor.isClient)\n    Field.prototype.iconClass = function(){\n        if (this.isValidating())\n            return AccountsTemplates.texts.inputIcons[\"isValidating\"];\n        if (this.hasError())\n            return AccountsTemplates.texts.inputIcons[\"hasError\"];\n        if (this.hasSuccess())\n            return AccountsTemplates.texts.inputIcons[\"hasSuccess\"];\n    };\n\nif (Meteor.isClient)\n    Field.prototype.isValidating = function(){\n        return this.validating.get();\n    };\n\nif (Meteor.isClient)\n    Field.prototype.setError = function(err){\n        check(err, Match.OneOf(String, undefined));\n        console.log(this._id + \" setErr: \" + err || true);\n        return this.status.set(err || true);\n    };\nif (Meteor.isServer)\n    Field.prototype.setError = function(err){\n        // Nothing to do server-side\n        return\n    };\n\nif (Meteor.isClient)\n    Field.prototype.setSuccess = function(){\n        return this.status.set(false);\n    };\nif (Meteor.isServer)\n    Field.prototype.setSuccess = function(){\n        // Nothing to do server-side\n        return\n    };\n\n\nif (Meteor.isClient)\n    Field.prototype.setValidating = function(state){\n        check(state, Boolean);\n        return this.validating.set(state);\n    };\nif (Meteor.isServer)\n    Field.prototype.setValidating = function(state){\n        // Nothing to do server-side\n        return\n    };\n\nif (Meteor.isClient)\n    Field.prototype.setValue = function(tempalteInstance, value){\n        if (this.type === \"checkbox\") {\n            tempalteInstance.$(\"#at-field-\" + this._id).prop('checked', true);\n            return;\n        }\n        if (this.type === \"radio\") {\n            tempalteInstance.$(\"[name=at-field-\"+ this._id + \"]\").prop('checked', true);\n            return;\n        }\n        tempalteInstance.$(\"#at-field-\" + this._id).val(value);\n    };\n\nField.prototype.validate = function(value, strict) {\n    check(value, Match.OneOf(undefined, String, Boolean));\n    this.setValidating(true);\n    this.clearStatus();\n    if (!value){\n        if (!!strict){\n            if (this.required) {\n                this.setError(\"Required Field\");\n                this.setValidating(false);\n                return \"Required Field\";\n            }\n            else {\n                this.setSuccess();\n                this.setValidating(false);\n                return false;\n            }\n        }\n        else {\n            this.clearStatus();\n            this.setValidating(false);\n            return null;\n        }\n    }\n    var valueLength = value.length;\n    var minLength = this.minLength;\n    if (minLength && valueLength < minLength) {\n        this.setError(\"Minimum required length: \" + minLength);\n        this.setValidating(false);\n        return \"Minimum required length: \" + minLength;\n    }\n    var maxLength = this.maxLength;\n    if (maxLength && valueLength > maxLength) {\n        this.setError(\"Maximum allowed length: \" + maxLength);\n        this.setValidating(false);\n        return \"Maximum allowed length: \" + maxLength;\n    }\n    if (this.re && valueLength && !value.match(this.re)) {\n        this.setError(this.errStr);\n        this.setValidating(false);\n        return this.errStr;\n    }\n    if (this.func && valueLength){\n        var result = this.func(value);\n        return result === true ? this.errStr || true : result;\n    }\n    this.setSuccess();\n    this.setValidating(false);\n    return false;\n};\n","// ---------------------------------------------------------------------------------\n\n// Patterns for methods\" parameters\n\n// ---------------------------------------------------------------------------------\n\nSTATE_PAT = {\n    changePwd: Match.Optional(String),\n    enrollAccount: Match.Optional(String),\n    forgotPwd: Match.Optional(String),\n    resetPwd: Match.Optional(String),\n    signIn: Match.Optional(String),\n    signUp: Match.Optional(String),\n};\n\nERRORS_PAT = {\n    mustBeLoggedIn: Match.Optional(String),\n    pwdMismatch: Match.Optional(String),\n};\n\nINFO_PAT = {\n    emailSent: Match.Optional(String),\n    emailVerified: Match.Optional(String),\n    pwdReset: Match.Optional(String),\n    pwdChanged: Match.Optional(String),\n    singUpVerifyEmail: Match.Optional(String),\n};\n\nINPUT_ICONS_PAT = {\n    isValidating: Match.Optional(String),\n    hasError: Match.Optional(String),\n    hasSuccess: Match.Optional(String),\n};\n\nObjWithStringValues = Match.Where(function (x) {\n    check(x, Object);\n    _.each(_.values(x), function(value){\n        check(value, String);\n    });\n    return true;\n});\n\nTEXTS_PAT = {\n    button: Match.Optional(STATE_PAT),\n    errors: Match.Optional(ERRORS_PAT),\n    navSignIn: Match.Optional(String),\n    navSignOut: Match.Optional(String),\n    info: Match.Optional(INFO_PAT),\n    inputIcons: Match.Optional(INPUT_ICONS_PAT),\n    optionalField: Match.Optional(String),\n    pwdLink_pre: Match.Optional(String),\n    pwdLink_link: Match.Optional(String),\n    pwdLink_suff: Match.Optional(String),\n    sep: Match.Optional(String),\n    signInLink_pre: Match.Optional(String),\n    signInLink_link: Match.Optional(String),\n    signInLink_suff: Match.Optional(String),\n    signUpLink_pre: Match.Optional(String),\n    signUpLink_link: Match.Optional(String),\n    signUpLink_suff: Match.Optional(String),\n    socialAdd: Match.Optional(String),\n    socialConfigure: Match.Optional(String),\n    socialIcons: Match.Optional(ObjWithStringValues),\n    socialRemove: Match.Optional(String),\n    socialSignIn: Match.Optional(String),\n    socialSignUp: Match.Optional(String),\n    socialWith: Match.Optional(String),\n    termsPreamble: Match.Optional(String),\n    termsPrivacy: Match.Optional(String),\n    termsAnd: Match.Optional(String),\n    termsTerms: Match.Optional(String),\n    title: Match.Optional(STATE_PAT),\n};\n\n// Configuration pattern to be checked with check\nCONFIG_PAT = {\n    // Behaviour\n    confirmPassword: Match.Optional(Boolean),\n    defaultState: Match.Optional(String),\n    enablePasswordChange: Match.Optional(Boolean),\n    enforceEmailVerification: Match.Optional(Boolean),\n    forbidClientAccountCreation: Match.Optional(Boolean),\n    overrideLoginErrors: Match.Optional(Boolean),\n    sendVerificationEmail: Match.Optional(Boolean),\n\n    // Appearance\n    defaultLayout: Match.Optional(String),\n    showAddRemoveServices: Match.Optional(Boolean),\n    showForgotPasswordLink: Match.Optional(Boolean),\n    showLabels: Match.Optional(Boolean),\n    showPlaceholders: Match.Optional(Boolean),\n    hideSignInLink: Match.Optional(Boolean),\n    hideSignUpLink: Match.Optional(Boolean),\n\n    // Client-side Validation\n    continuousValidation: Match.Optional(Boolean),\n    negativeFeedback: Match.Optional(Boolean),\n    negativeValidation: Match.Optional(Boolean),\n    positiveValidation: Match.Optional(Boolean),\n    positiveFeedback: Match.Optional(Boolean),\n    showValidating: Match.Optional(Boolean),\n\n    // Privacy Policy and Terms of Use\n    privacyUrl: Match.Optional(String),\n    termsUrl: Match.Optional(String),\n\n    // Redirects\n    homeRoutePath: Match.Optional(String),\n    redirectTimeout: Match.Optional(Number),\n\n    texts: Match.Optional(TEXTS_PAT),\n};\n\n\nFIELD_SUB_PAT = {\n    default: Match.Optional(String),\n    changePwd: Match.Optional(String),\n    enrollAccount: Match.Optional(String),\n    forgotPwd: Match.Optional(String),\n    resetPwd: Match.Optional(String),\n    signIn: Match.Optional(String),\n    signUp: Match.Optional(String),\n};\n\n\n// Field pattern\nFIELD_PAT = {\n    _id: String,\n    type: String,\n    required: Match.Optional(Boolean),\n    displayName: Match.Optional(Match.OneOf(String, FIELD_SUB_PAT)),\n    placeholder: Match.Optional(Match.OneOf(String, FIELD_SUB_PAT)),\n    select: Match.Optional([{text: String, value: Match.Any}]),\n    minLength: Match.Optional(Match.Integer),\n    maxLength: Match.Optional(Match.Integer),\n    re: Match.Optional(RegExp),\n    func: Match.Optional(Match.Where(_.isFunction)),\n    errStr: Match.Optional(String),\n\n    // Client-side Validation\n    continuousValidation: Match.Optional(Boolean),\n    negativeFeedback: Match.Optional(Boolean),\n    negativeValidation: Match.Optional(Boolean),\n    positiveValidation: Match.Optional(Boolean),\n    positiveFeedback: Match.Optional(Boolean),\n\n    // Transforms\n    trim: Match.Optional(Boolean),\n    lowercase: Match.Optional(Boolean),\n    uppercase: Match.Optional(Boolean),\n};\n\n// Route configuration pattern to be checked with check\nvar ROUTE_PAT = {\n    name: Match.Optional(String),\n    path: Match.Optional(String),\n    template: Match.Optional(String),\n    layoutTemplate: Match.Optional(String),\n    redirect: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction))),\n};\n\n\n// ---------------------------------------------------------------------------------\n\n// AccountsTemplates object\n\n// ---------------------------------------------------------------------------------\n\n\n\n// -------------------\n// Client/Server stuff\n// -------------------\n\n// Constructor\nAT = function() {\n\n};\n\n\n\n\n/*\n    Each field object is represented by the following properties:\n        _id:         String   (required)  // A unique field\"s id / name\n        type:        String   (required)  // Displayed input type\n        required:    Boolean  (optional)  // Specifies Whether to fail or not when field is left empty\n        displayName: String   (optional)  // The field\"s name to be displayed as a label above the input element\n        placeholder: String   (optional)  // The placeholder text to be displayed inside the input element\n        minLength:   Integer  (optional)  // Possibly specifies the minimum allowed length\n        maxLength:   Integer  (optional)  // Possibly specifies the maximum allowed length\n        re:          RegExp   (optional)  // Regular expression for validation\n        func:        Function (optional)  // Custom function for validation\n        errStr:      String   (optional)  // Error message to be displayed in case re validation fails\n*/\n\n\n\n/*\n    Routes configuration can be done by calling AccountsTemplates.configureRoute with the route name and the\n    following options in a separate object. E.g. AccountsTemplates.configureRoute(\"gingIn\", option);\n        name:           String (optional). A unique route\"s name to be passed to iron-router\n        path:           String (optional). A unique route\"s path to be passed to iron-router\n        template:       String (optional). The name of the template to be rendered\n        layoutTemplate: String (optional). The name of the layout to be used\n        redirect:       String (optional). The name of the route (or its path) where to redirect after form submit\n*/\n\n\n// Allowed routes along with theirs default configuration values\nAT.prototype.ROUTE_DEFAULT = {\n    changePwd:     { name: \"atChangePwd\",     path: \"/change-password\"},\n    enrollAccount: { name: \"atEnrollAccount\", path: \"/enroll-account\"},\n    forgotPwd:     { name: \"atForgotPwd\",     path: \"/forgot-password\"},\n    resetPwd:      { name: \"atResetPwd\",      path: \"/reset-password\"},\n    signIn:        { name: \"atSignIn\",        path: \"/sign-in\"},\n    signUp:        { name: \"atSignUp\",        path: \"/sign-up\"},\n    verifyEmail:   { name: \"atVerifyEmail\",   path: \"/verify-email\"},\n};\n\n\n\n// Allowed input types\nAT.prototype.INPUT_TYPES = [\n    \"checkbox\",\n    \"email\",\n    \"hidden\",\n    \"password\",\n    \"radio\",\n    \"select\",\n    \"tel\",\n    \"text\",\n    \"url\",\n];\n\n// Current configuration values\nAT.prototype.options = {\n    // Appearance\n    //defaultLayout: undefined,\n    showAddRemoveServices: false,\n    showForgotPasswordLink: false,\n    showLabels: true,\n    showPlaceholders: true,\n\n    // Behaviour\n    confirmPassword: true,\n    defaultState: \"signIn\",\n    enablePasswordChange: false,\n    forbidClientAccountCreation: false,\n    overrideLoginErrors: true,\n    sendVerificationEmail: false,\n\n    // Client-side Validation\n    //continuousValidation: false,\n    //negativeFeedback: false,\n    //negativeValidation: false,\n    //positiveValidation: false,\n    //positiveFeedback: false,\n    //showValidating: false,\n\n    // Privacy Policy and Terms of Use\n    privacyUrl: undefined,\n    termsUrl: undefined,\n\n    // Redirects\n    homeRoutePath: \"/\",\n    redirectTimeout: 2000, // 2 seconds\n};\n\nAT.prototype.SPECIAL_FIELDS = [\n    \"password_again\",\n    \"username_and_email\",\n];\n\n// SignIn / SignUp fields\nAT.prototype._fields = [\n    new Field({\n        _id: \"email\",\n        type: \"email\",\n        required: true,\n        lowercase: true,\n        trim: true,\n    }),\n    new Field({\n        _id: \"password\",\n        type: \"password\",\n        required: true,\n        minLength: 6,\n        displayName: {\n            default: \"password\",\n            changePwd: \"newPassword\",\n            resetPwd: \"newPassword\",\n        },\n        placeholder: {\n            default: \"password\",\n            changePwd: \"newPassword\",\n            resetPwd: \"newPassword\",\n        },\n    }),\n];\n\n// Configured routes\nAT.prototype.routes = {};\n\nAT.prototype._initialized = false;\n\n// Input type validation\nAT.prototype._isValidInputType = function(value) {\n    return _.indexOf(this.INPUT_TYPES, value) !== -1;\n};\n\nAT.prototype.addField = function(field) {\n    // Fields can be added only before initialization\n    if (this._initialized)\n        throw new Error(\"AccountsTemplates.addField should strictly be called before AccountsTemplates.init!\");\n    field = _.pick(field, _.keys(FIELD_PAT));\n    check(field, FIELD_PAT);\n    // Checks there\"s currently no field called field._id\n    if (_.indexOf(_.pluck(this._fields, \"_id\"), field._id) !== -1)\n        throw new Error(\"A field called \" + field._id + \" already exists!\");\n    // Validates field.type\n    if (!this._isValidInputType(field.type))\n        throw new Error(\"field.type is not valid!\");\n    // Checks field.minLength is strictly positive\n    if (typeof field.minLength !== \"undefined\" && field.minLength <= 0)\n        throw new Error(\"field.minLength should be greater than zero!\");\n    // Checks field.maxLength is strictly positive\n    if (typeof field.maxLength !== \"undefined\" && field.maxLength <= 0)\n        throw new Error(\"field.maxLength should be greater than zero!\");\n    // Checks field.maxLength is greater than field.minLength\n    if (typeof field.minLength !== \"undefined\" && typeof field.minLength !== \"undefined\" && field.maxLength < field.minLength)\n        throw new Error(\"field.maxLength should be greater than field.maxLength!\");\n\n    if (!(Meteor.isServer && _.contains(this.SPECIAL_FIELDS, field._id)))\n        this._fields.push(new Field(field));\n    return this._fields;\n};\n\nAT.prototype.addFields = function(fields) {\n    var ok;\n    try { // don\"t bother with `typeof` - just access `length` and `catch`\n        ok = fields.length > 0 && \"0\" in Object(fields);\n    } catch (e) {\n        throw new Error(\"field argument should be an array of valid field objects!\");\n    }\n    if (ok) {\n        _.map(fields, function(field){\n            this.addField(field);\n        }, this);\n    } else\n        throw new Error(\"field argument should be an array of valid field objects!\");\n    return this._fields;\n};\n\nAT.prototype.configure = function(config) {\n    // Configuration options can be set only before initialization\n    if (this._initialized)\n        throw new Error(\"Configuration options must be set before AccountsTemplates.init!\");\n\n    // Updates the current configuration\n    check(config, CONFIG_PAT);\n    var options = _.omit(config, \"texts\");\n    this.options = _.defaults(options, this.options);\n\n    if (Meteor.isClient){\n        // Possibly sets up client texts...\n        if (config.texts){\n            var texts = config.texts;\n            var simpleTexts = _.omit(texts, \"button\", \"errors\", \"info\", \"inputIcons\", \"socialIcons\", \"title\");\n            this.texts = _.defaults(simpleTexts, this.texts);\n\n            if (texts.button) {\n                // Updates the current button object\n                this.texts.button = _.defaults(texts.button, this.texts.button);\n            }\n            if (texts.errors) {\n                // Updates the current errors object\n                this.texts.errors = _.defaults(texts.errors, this.texts.errors);\n            }\n            if (texts.info) {\n                // Updates the current info object\n                this.texts.info = _.defaults(texts.info, this.texts.info);\n            }\n            if (texts.inputIcons) {\n                // Updates the current inputIcons object\n                this.texts.inputIcons = _.defaults(texts.inputIcons, this.texts.inputIcons);\n            }\n            if (texts.socialIcons) {\n                // Updates the current socialIcons object\n                this.texts.socialIcons = _.defaults(texts.socialIcons, this.texts.socialIcons);\n            }\n            if (texts.title) {\n                // Updates the current title object\n                this.texts.title = _.defaults(texts.title, this.texts.title);\n            }\n        }\n    }\n};\n\nAT.prototype.configureRoute = function(route, options) {\n    check(route, String);\n    check(options, Match.OneOf(undefined, ROUTE_PAT));\n    // Route Configuration can be done only before initialization\n    if (this._initialized)\n        throw new Error(\"Route Configuration can be done only before AccountsTemplates.init!\");\n    // Only allowed routes can be configured\n    if (!(route in this.ROUTE_DEFAULT))\n        throw new Error(\"Unknown Route!\");\n\n    // Possibly adds a initial / to the provided path\n    if (options && options.path && options.path[0] !== \"/\"){\n        options = _.clone(options);\n        options.path = \"/\" + options.path;\n    }\n    // Updates the current configuration\n    options = _.defaults(options || {}, this.ROUTE_DEFAULT[route]);\n    this.routes[route] = options;\n};\n\nAT.prototype.hasField = function(fieldId) {\n    return !!this.getField(fieldId);\n};\n\nAT.prototype.getField = function(fieldId) {\n    var field = _.filter(this._fields, function(field){\n        return field._id == fieldId;\n    });\n    return (field.length === 1) ? field[0] : undefined;\n};\n\nAT.prototype.getFields = function() {\n    return this._fields;\n};\n\nAT.prototype.getFieldIds = function() {\n    return _.pluck(this._fields, \"_id\");\n};\n\nAT.prototype.getRouteName = function(route) {\n    if (route in this.routes)\n        return this.routes[route].name;\n    return null;\n};\n\nAT.prototype.getRoutePath = function(route) {\n    if (route in this.routes)\n        return this.routes[route].path;\n    return \"#\";\n};\n\nAT.prototype.oauthServices = function(){\n    // Extracts names of available services\n    var names;\n    if (Meteor.isServer)\n        names = (Accounts.oauth && Accounts.oauth.serviceNames()) || [];\n    else\n        names = (Accounts.oauth && Accounts.loginServicesConfigured() && Accounts.oauth.serviceNames()) || [];\n    // Extracts names of configured services\n    var configuredServices = [];\n    if (Accounts.loginServiceConfiguration)\n        configuredServices = _.pluck(Accounts.loginServiceConfiguration.find().fetch(), \"service\");\n\n    // Builds a list of objects containing service name as _id and its configuration status\n    var services = _.map(names, function(name){\n        return {\n            _id : name,\n            configured: _.contains(configuredServices, name),\n        };\n    });\n\n    // Checks whether there is a UI to configure services...\n    // XXX: this only works with the accounts-ui package\n    var showUnconfigured = typeof Accounts._loginButtonsSession !== \"undefined\";\n\n    // Filters out unconfigured services in case they\"re not to be displayed\n    if (!showUnconfigured){\n        services = _.filter(services, function(service){\n            return service.configured;\n        });\n    }\n\n    // Sorts services by name\n    services = _.sortBy(services, function(service){\n        return service._id;\n    });\n\n    return services;\n};\n\nAT.prototype.removeField = function(fieldId) {\n    // Fields can be removed only before initialization\n    if (this._initialized)\n        throw new Error(\"AccountsTemplates.removeField should strictly be called before AccountsTemplates.init!\");\n    // Tries to look up the field with given _id\n    var index = _.indexOf(_.pluck(this._fields, \"_id\"), fieldId);\n    if (index !== -1)\n        return this._fields.splice(index, 1)[0];\n    else\n        if (!(Meteor.isServer && _.contains(this.SPECIAL_FIELDS, fieldId)))\n            throw new Error(\"A field called \" + fieldId + \" does not exist!\");\n};\n\nAT.prototype.setupRoutes = function() {\n    if (Meteor.isServer){\n        // Possibly prints a warning in case showForgotPasswordLink is set to true but the route is not configured\n        if (AccountsTemplates.options.showForgotPasswordLink && !(\"forgotPwd\" in  AccountsTemplates.routes))\n            console.warn(\"[AccountsTemplates] WARNING: showForgotPasswordLink set to true, but forgotPwd route is not configured!\");\n        // Configures \"reset password\" email link\n        if (\"resetPwd\" in AccountsTemplates.routes){\n            var resetPwdPath = AccountsTemplates.routes[\"resetPwd\"].path.substr(1);\n            Accounts.urls.resetPassword = function(token){\n                return Meteor.absoluteUrl(resetPwdPath + \"/\" + token);\n            };\n        }\n        // Configures \"enroll account\" email link\n        if (\"enrollAccount\" in AccountsTemplates.routes){\n            var enrollAccountPath = AccountsTemplates.routes[\"enrollAccount\"].path.substr(1);\n            Accounts.urls.enrollAccount = function(token){\n                return Meteor.absoluteUrl(enrollAccountPath + \"/\" + token);\n            };\n        }\n        // Configures \"verify email\" email link\n        if (\"verifyEmail\" in AccountsTemplates.routes){\n            var verifyEmailPath = AccountsTemplates.routes[\"verifyEmail\"].path.substr(1);\n            Accounts.urls.verifyEmail = function(token){\n                return Meteor.absoluteUrl(verifyEmailPath + \"/\" + token);\n            };\n        }\n    }\n\n    // Determines the default layout to be used in case no specific one is specified for single routes\n    var defaultLayout = AccountsTemplates.options.defaultLayout || Router.options.layoutTemplate;\n\n    _.each(AccountsTemplates.routes, function(options, route){\n        if (route === \"changePwd\" && !AccountsTemplates.options.enablePasswordChange)\n            throw new Error(\"changePwd route configured but enablePasswordChange set to false!\");\n        if (route === \"forgotPwd\" && !AccountsTemplates.options.showForgotPasswordLink)\n            throw new Error(\"forgotPwd route configured but showForgotPasswordLink set to false!\");\n        if (route === \"signUp\" && AccountsTemplates.options.forbidClientAccountCreation)\n            throw new Error(\"signUp route configured but forbidClientAccountCreation set to true!\");\n        // Possibly prints a warning in case the MAIL_URL environment variable was not set\n        if (Meteor.isServer && route === \"forgotPwd\" && (!process.env.MAIL_URL || ! Package[\"email\"])){\n            console.warn(\"[AccountsTemplates] WARNING: showForgotPasswordLink set to true, but MAIL_URL is not configured!\");\n        }\n\n        var name = options.name; // Default provided...\n        var path = options.path; // Default provided...\n        var template = options.template || \"fullPageAtForm\";\n        var layoutTemplate = options.layoutTemplate || defaultLayout;\n\n        // Possibly adds token parameter\n        if (_.contains([\"enrollAccount\", \"resetPwd\", \"verifyEmail\"], route)){\n            path += \"/:paramToken\";\n            if (route === \"verifyEmail\")\n                Router.route(path, {\n                    name: name,\n                    template: template,\n                    layoutTemplate: layoutTemplate,\n                    onBeforeAction: function() {\n                        AccountsTemplates.setState(route);\n                        this.next();\n                    },\n                    onAfterAction: function() {\n                        AccountsTemplates.setDisabled(true);\n                        var token = this.params.paramToken;\n                        Accounts.verifyEmail(token, function(error){\n                            AccountsTemplates.setDisabled(false);\n                            AccountsTemplates.submitCallback(error, route, function(){\n                                AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.emailVerified);\n                            });\n                        });\n                    },\n                    onStop: function() {\n                        AccountsTemplates.clearState();\n                    },\n                });\n            else\n                Router.route(path, {\n                    name: name,\n                    template: template,\n                    layoutTemplate: layoutTemplate,\n                    onRun: function() {\n                        AccountsTemplates.paramToken = this.params.paramToken;\n                        this.next();\n                    },\n                    onBeforeAction: function() {\n                        AccountsTemplates.setState(route);\n                        this.next();\n                    },\n                    onStop: function() {\n                        AccountsTemplates.clearState();\n                        AccountsTemplates.paramToken = null;\n                    }\n                });\n        }\n        else\n            Router.route(path, {\n                name: name,\n                template: template,\n                layoutTemplate: layoutTemplate,\n                onBeforeAction: function() {\n                    if(Meteor.user() && route != 'changePwd')\n                        AccountsTemplates.postSubmitRedirect(route);\n                    else\n                        AccountsTemplates.setState(route);\n                    this.next();\n                },\n                onStop: function() {\n                    AccountsTemplates.clearState();\n                }\n            });\n    });\n};\n","// Allowed Internal (client-side) States\nAT.prototype.STATES = [\n    \"changePwd\", // Change Password\n    \"enrollAccount\", // Account Enrollment\n    \"forgotPwd\", // Forgot Password\n    \"hide\", // Nothing displayed\n    \"resetPwd\", // Reset Password\n    \"signIn\", // Sign In\n    \"signUp\", // Sign Up\n    \"verifyEmail\", // Email verification\n];\n\nAT.prototype._loginType = \"\";\n\n// Previous path used for redirect after form submit\nAT.prototype._prevPath = null;\n\n// Flag telling whether the whole form should appear disabled\nAT.prototype._disabled = false;\n\n// Flag used to avoid redirecting to previous route when signing in/up\n// as a results of a call to ensureSignedIn\nAT.prototype.avoidRedirect = false;\n\nAT.prototype.texts = {\n    button: {\n        changePwd: \"updateYourPassword\",\n        enrollAccount: \"createAccount\",\n        forgotPwd: \"emailResetLink\",\n        resetPwd: \"setPassword\",\n        signIn: \"signIn\",\n        signUp: \"signUp\",\n    },\n    errors: {\n        mustBeLoggedIn: \"error.accounts.Must be logged in\",\n        pwdMismatch: \"error.pwdsDontMatch\",\n    },\n    navSignIn: 'signIn',\n    navSignOut: 'signOut',\n    info: {\n        emailSent: \"info.emailSent\",\n        emailVerified: \"info.emailVerified\",\n        pwdChanged: \"info.passwordChanged\",\n        pwdReset: \"info.passwordReset\",\n        pwdSet: \"Password Set\",\n        singUpVerifyEmail: \"Registration Successful! Please check your email and follow the instructions.\",\n    },\n    inputIcons: {\n        isValidating: \"fa fa-spinner fa-spin\",\n        hasSuccess: \"fa fa-check\",\n        hasError: \"fa fa-times\",\n    },\n    optionalField: \"optional\",\n    pwdLink_pre: \"\",\n    pwdLink_link: \"forgotPassword\",\n    pwdLink_suff: \"\",\n    sep: \"OR\",\n    signInLink_pre: \"ifYouAlreadyHaveAnAccount\",\n    signInLink_link: \"signin\",\n    signInLink_suff: \"\",\n    signUpLink_pre: \"dontHaveAnAccount\",\n    signUpLink_link: \"signUp\",\n    signUpLink_suff: \"\",\n    socialAdd: \"add\",\n    socialConfigure: \"configure\",\n    socialIcons: {\n        \"meteor-developer\": \"fa fa-rocket\"\n    },\n    socialRemove: \"remove\",\n    socialSignIn: \"signIn\",\n    socialSignUp: \"signUp\",\n    socialWith: \"with\",\n    termsPreamble: \"clickAgree\",\n    termsPrivacy: \"privacyPolicy\",\n    termsAnd: \"and\",\n    termsTerms: \"terms\",\n    title: {\n        changePwd: \"changePassword\",\n        enrollAccount: \"createAccount\",\n        forgotPwd: \"resetYourPassword\",\n        resetPwd: \"resetYourPassword\",\n        signIn: \"signIn\",\n        signUp: \"createAccount\",\n    },\n};\n\n// Known routes used to filter out previous path for redirects...\nAT.prototype.knownRoutes = [];\n\n// Token provided for routes like reset-password and enroll-account\nAT.prototype.paramToken = null;\n\n// Current Internal (client-side) State (to be among allowed ones, see STATES)\n//AT.prototype.state = \"signIn\";\n\n// State validation\nAT.prototype._isValidState = function(value) {\n    return _.contains(this.STATES, value);\n};\n\nAT.prototype.loginType = function () {\n    return this._loginType;\n};\n\n// Getter for previous route\"s path\nAT.prototype.getPrevPath = function() {\n    return this._prevPath;\n};\n\n// Setter for previous route\"s path\nAT.prototype.setPrevPath = function(newPath) {\n    check(newPath, String);\n    this._prevPath = newPath;\n};\n\n// Getter for current state\nAT.prototype.getState = function() {\n    return this.state.form.get(\"state\");\n};\n\n// Handy function to compute Hash for passwords\nAT.prototype.hashPassword = function (password) {\n  return {\n    digest: SHA256(password),\n    algorithm: \"sha-256\"\n  };\n};\n\n// Getter for disabled state\nAT.prototype.disabled = function() {\n    return this.state.form.equals(\"disabled\", true) ? \"disabled\" : undefined;\n};\n\n// Setter for disabled state\nAT.prototype.setDisabled = function(value) {\n    check(value, Boolean);\n    return this.state.form.set(\"disabled\", value);\n};\n\n// Setter for current state\nAT.prototype.setState = function(state, callback) {\n    check(state, String);\n    if (!this._isValidState(state))\n        throw new Meteor.Error(500, \"Internal server error\", \"accounts-templates-core package got an invalid state value!\");\n    this.state.form.set(\"state\", state);\n    this.clearState();\n    if (_.isFunction(callback))\n        callback();\n};\n\nAT.prototype.clearState = function() {\n    _.each(this._fields, function(field){\n        field.clearStatus();\n    });\n    var form = this.state.form;\n    form.set(\"error\", null);\n    form.set(\"result\", null);\n};\n\nAT.prototype.clearError = function() {\n    form.set(\"error\", null);\n};\n\nAT.prototype.clearResult = function() {\n    form.set(\"result\", null);\n};\n\nAT.prototype.ensureSignedIn = function() {\n    if (!Meteor.user()) {\n        AccountsTemplates.setPrevPath(Router.current().url);\n        AccountsTemplates.setState(AccountsTemplates.options.defaultState, function(){\n            var err = AccountsTemplates.texts.errors.mustBeLoggedIn;\n            AccountsTemplates.state.form.set(\"error\", [err]);\n        });\n        AccountsTemplates.avoidRedirect = true;\n        // render the login template but keep the url in the browser the same\n        var signInRouteTemplate = AccountsTemplates.routes.signIn && AccountsTemplates.routes.signIn.template;\n        this.render(signInRouteTemplate || \"fullPageAtForm\");\n        this.renderRegions();\n    } else {\n        this.next();\n    }\n};\n\n// Initialization\n\n// Initialization\nAT.prototype.init = function() {\n    console.warn(\"[AccountsTemplates] There is no more need to call AccountsTemplates.init()! Simply remove the call ;-)\");\n};\n\nAT.prototype._init = function() {\n    if (this._initialized)\n        return;\n\n    var usernamePresent = this.hasField(\"username\");\n    var emailPresent = this.hasField(\"email\");\n    if (usernamePresent && emailPresent){\n        this._loginType = \"username_and_email\";\n    }\n    else{\n        if (usernamePresent)\n            this._loginType = \"username\";\n        else\n            this._loginType = \"email\";\n    }\n\n    if (this._loginType === \"username_and_email\"){\n        // Possibly adds the field username_and_email in case\n        // it was not configured\n        if (!this.hasField(\"username_and_email\"))\n            this.addField({\n                _id: \"username_and_email\",\n                type: \"text\",\n                displayName: \"usernameOrEmail\",\n                placeholder: \"usernameOrEmail\",\n                required: true,\n            });\n    }\n\n    // Only in case password confirmation is required\n    if (this.options.confirmPassword){\n        // Possibly adds the field password_again in case\n        // it was not configured\n        if (!this.hasField(\"password_again\")){\n            var pwdAgain = _.clone(this.getField(\"password\"));\n            pwdAgain._id = \"password_again\";\n            pwdAgain.displayName = {\n                default: \"passwordAgain\",\n                changePwd: \"newPasswordAgain\",\n                resetPwd: \"newPasswordAgain\",\n            };\n            pwdAgain.placeholder = {\n                default: \"passwordAgain\",\n                changePwd: \"newPasswordAgain\",\n                resetPwd: \"newPasswordAgain\",\n            };\n            this.addField(pwdAgain);\n        }\n    }\n    else{\n        if (this.hasField(\"password_again\"))\n            throw new Error(\"AccountsTemplates: a field password_again was added but confirmPassword is set to false!\");\n    }\n\n    // Possibly adds the field current_password in case\n    // it was not configured\n    if (this.options.enablePasswordChange){\n        if (!this.hasField(\"current_password\"))\n            this.addField({\n                _id: \"current_password\",\n                type: \"password\",\n                displayName: \"currentPassword\",\n                placeholder: \"currentPassword\",\n                required: true,\n            });\n    }\n\n    // Ensuser the right order of special fields\n    var moveFieldAfterPwd = function(field_name, reference_field_name) {\n        var fieldIds = AccountsTemplates.getFieldIds();\n        var refFieldId = _.indexOf(fieldIds, reference_field_name);\n        // In case the reference field is not present, just return...\n        if (refFieldId === -1)\n            return;\n        var fieldId = _.indexOf(fieldIds, field_name);\n        // In case the sought field is not present, just return...\n        if (fieldId === -1)\n            return;\n        if (fieldId !== -1 && fieldId !== (refFieldId + 1)){\n            // removes the field\n            var field = AccountsTemplates._fields.splice(fieldId, 1)[0];\n            // push the field right after the reference field position\n            var new_fieldIds = AccountsTemplates.getFieldIds();\n            var new_refFieldId = _.indexOf(new_fieldIds, reference_field_name);\n            AccountsTemplates._fields.splice(new_refFieldId + 1, 0, field);\n        }\n    };\n    // The final order should be something like:\n    // - username\n    // - email\n    // - username_and_email\n    // - password\n    // - password_again\n    //\n    // ...so lets do it in reverse order...\n    moveFieldAfterPwd(\"username_and_email\", \"username\");\n    moveFieldAfterPwd(\"username_and_email\", \"email\");\n    moveFieldAfterPwd(\"password\", \"current_password\");\n    moveFieldAfterPwd(\"password_again\", \"password\");\n\n\n    // Sets visibility condition and validation flags for each field\n    var gPositiveValidation = !!AccountsTemplates.options.positiveValidation;\n    var gNegativeValidation = !!AccountsTemplates.options.negativeValidation;\n    var gShowValidating = !!AccountsTemplates.options.showValidating;\n    var gContinuousValidation = !!AccountsTemplates.options.continuousValidation;\n    var gNegativeFeedback = !!AccountsTemplates.options.negativeFeedback;\n    var gPositiveFeedback = !!AccountsTemplates.options.positiveFeedback;\n    _.each(this._fields, function(field){\n        // Visibility\n        switch(field._id) {\n            case \"current_password\":\n                field.visible = [\"changePwd\"];\n                break;\n            case \"email\":\n                field.visible = [\"forgotPwd\", \"signUp\"];\n                if (AccountsTemplates.loginType() === \"email\")\n                    field.visible.push(\"signIn\");\n                break;\n            case \"password\":\n                field.visible = [\"changePwd\", \"enrollAccount\", \"resetPwd\", \"signIn\", \"signUp\"];\n                break;\n            case \"password_again\":\n                field.visible = [\"changePwd\", \"enrollAccount\", \"resetPwd\", \"signUp\"];\n                break;\n            case \"username\":\n                field.visible = [\"signUp\"];\n                if (AccountsTemplates.loginType() === \"username\")\n                    field.visible.push(\"signIn\");\n                break;\n            case \"username_and_email\":\n                field.visible = [];\n                if (AccountsTemplates.loginType() === \"username_and_email\")\n                    field.visible.push(\"signIn\");\n                break;\n            default:\n                field.visible = [\"signUp\"];\n        }\n\n        // Validation\n        var positiveValidation = field.positiveValidation;\n        if (positiveValidation === undefined)\n            field.positiveValidation = gPositiveValidation;\n        var negativeValidation = field.negativeValidation;\n        if (negativeValidation === undefined)\n            field.negativeValidation = gNegativeValidation;\n        field.validation = field.positiveValidation || field.negativeValidation;\n        if (field.continuousValidation === undefined)\n            field.continuousValidation = gContinuousValidation;\n        field.continuousValidation = field.validation && field.continuousValidation;\n        if (field.negativeFeedback === undefined)\n            field.negativeFeedback = gNegativeFeedback;\n        if (field.positiveFeedback === undefined)\n            field.positiveFeedback = gPositiveFeedback;\n        field.feedback = field.negativeFeedback || field.positiveFeedback;\n        // Validating icon\n        var showValidating = field.showValidating;\n        if (showValidating === undefined)\n            field.showValidating = gShowValidating;\n\n    });\n\n    // Initializes reactive states\n    form = new ReactiveDict();\n    form.set(\"disabled\", false);\n    form.set(\"state\", \"signIn\");\n    form.set(\"result\", null);\n    form.set(\"error\", null);\n    this.state = {\n        form: form,\n    };\n\n    // Possibly subscribes to extended user data (to get the list of registered services...)\n    if (this.options.showAddRemoveServices){\n        Meteor.subscribe(\"userRegisteredServices\");\n    }\n\n    // ------------\n    // Routing Stuff\n    // ------------\n\n    // Known routes are used to filter out previous path for redirects...\n    this.knownRoutes = _.pluck(_.values(this.routes), \"path\");\n\n    // Stores previous path on path change...\n    Router.onStop(function() {\n        Tracker.nonreactive(function () {\n            var currentPath = Router.current().url;\n            if (!_.contains(AccountsTemplates.knownRoutes, currentPath))\n                AccountsTemplates.setPrevPath(currentPath);\n            AccountsTemplates.avoidRedirect = false;\n        });\n    });\n\n    // Sets up configured routes\n    AccountsTemplates.setupRoutes();\n\n    // Marks AccountsTemplates as initialized\n    this._initialized = true;\n};\n\nAT.prototype.linkClick = function(route){\n    if (AccountsTemplates.disabled())\n        return;\n    if (AccountsTemplates.avoidRedirect || AccountsTemplates.getRoutePath(route) === \"#\")\n        AccountsTemplates.setState(route);\n    else\n        Meteor.defer(function(){\n            Router.go(AccountsTemplates.getRouteName(route));\n        });\n};\n\nAT.prototype.logout = function(){\n    Meteor.logout();\n    var homeRoutePath = AccountsTemplates.options.homeRoutePath;\n    if (homeRoutePath)\n        Router.go(homeRoutePath);\n};\n\nAT.prototype.postSubmitRedirect = function(route){\n    if (AccountsTemplates.avoidRedirect)\n        AccountsTemplates.avoidRedirect = false;\n    else{\n        var nextPath = AccountsTemplates.routes[route] && AccountsTemplates.routes[route].redirect;\n        if (nextPath){\n            if (_.isFunction(nextPath))\n                nextPath();\n            else\n                Router.go(nextPath);\n        }else{\n            var previousPath = AccountsTemplates.getPrevPath();\n            if (previousPath)\n                Router.go(previousPath);\n            else{\n                var homeRoutePath = AccountsTemplates.options.homeRoutePath;\n                if (homeRoutePath)\n                    Router.go(homeRoutePath);\n            }\n        }\n    }\n};\n\nAT.prototype.submitCallback = function(error, state, onSuccess){\n    if (error) {\n        if(_.isObject(error.details))\n            // If error.details is an object, we may try to set fields errors from it\n            _.each(error.details, function(error, fieldId){\n                AccountsTemplates.getField(fieldId).setError(error);\n            });\n        else{\n            var err = error.reason ? \"error.accounts.\" + error.reason : \"error.accounts.Unknown error\";\n            AccountsTemplates.state.form.set(\"error\", [err]);\n        }\n        AccountsTemplates.setDisabled(false);\n    }\n    else{\n        if (onSuccess)\n        onSuccess();\n        if (_.contains([\"enrollAccount\", \"forgotPwd\", \"resetPwd\", \"verifyEmail\"], state)){\n            var redirectTimeout = AccountsTemplates.options.redirectTimeout;\n            if (redirectTimeout > 0)\n                Meteor.setTimeout(function(){\n                    AccountsTemplates.setDisabled(false);\n                    AccountsTemplates.postSubmitRedirect(state);\n                }, redirectTimeout);\n        }\n        else if (state){\n            AccountsTemplates.setDisabled(false);\n            AccountsTemplates.postSubmitRedirect(state);\n        }\n    }\n};\n\nAccountsTemplates = new AT();\n\n\n// Initialization\nMeteor.startup(function(){\n    AccountsTemplates._init();\n});\n","AT.prototype.atErrorHelpers = {\n    error: function() {\n        return AccountsTemplates.state.form.get(\"error\");\n    },\n    errorText: function(){\n        var field, err;\n        if (this.field){\n            field = T9n.get(this.field, markIfMissing=false);\n            err = T9n.get(this.err, markIfMissing=false);\n        }\n        else\n            err = T9n.get(this.valueOf(), markIfMissing=false);\n\n        // Possibly removes initial prefix in case the key in not found inside t9n\n        if (err.substring(0, 15) === \"error.accounts.\")\n            err = err.substring(15);\n\n        if (field)\n            return field + \": \" + err;\n        return err;\n    },\n};\n","AT.prototype.atFormHelpers = {\n    hide: function(){\n        var state = this.state || AccountsTemplates.getState();\n        return state === \"hide\";\n    },\n    showTitle: function(next_state){\n        var state = next_state || this.state || AccountsTemplates.getState();\n        if (state === \"verifyEmail\" || (Meteor.user() && state === \"signIn\"))\n            return false;\n        return true;\n        //return !(state === \"signIn\" && AccountsTemplates.oauthServices().length);\n    },\n    showOauthServices: function(next_state){\n        var state = next_state || this.state || AccountsTemplates.getState();\n        if (!(state === \"signIn\" || state === \"signUp\"))\n            return false;\n        var services = AccountsTemplates.oauthServices();\n        if (!services.length)\n            return false;\n        if (Meteor.user())\n            return AccountsTemplates.options.showAddRemoveServices;\n        return true;\n    },\n    showServicesSeparator: function(next_state){\n        var pwdService = Package[\"accounts-password\"] !== undefined;\n        var state = next_state || this.state || AccountsTemplates.getState();\n        var rightState = (state === \"signIn\" || state === \"signUp\");\n        return rightState && !Meteor.user() && pwdService && AccountsTemplates.oauthServices().length;\n    },\n    showError: function(next_state) {\n        return !!AccountsTemplates.state.form.get(\"error\");\n    },\n    showResult: function(next_state) {\n        return !!AccountsTemplates.state.form.get(\"result\");\n    },\n    showPwdForm: function(next_state) {\n        if (Package[\"accounts-password\"] === undefined)\n            return false;\n        var state = next_state || this.state || AccountsTemplates.getState();\n        if ((state === \"verifyEmail\") || (state === \"signIn\" && Meteor.user()))\n            return false;\n        return true;\n    },\n    showSignInLink: function(next_state){\n        if (AccountsTemplates.options.hideSignInLink)\n            return false;\n        var state = next_state || this.state || AccountsTemplates.getState();\n        //return state === \"signUp\" || state === \"forgotPwd\";\n        return state === \"signUp\";\n    },\n    showSignUpLink: function(next_state){\n        if  (AccountsTemplates.options.hideSignUpLink)\n            return false;\n        var state = next_state || this.state || AccountsTemplates.getState();\n        return ((state === \"signIn\" && !Meteor.user()) || state === \"forgotPwd\") && !AccountsTemplates.options.forbidClientAccountCreation;\n    },\n    showTermsLink: function(next_state){\n        var state = next_state || this.state || AccountsTemplates.getState();\n        if (state === \"signUp\" && (!!AccountsTemplates.options.privacyUrl || !!AccountsTemplates.options.termsUrl))\n            return true;\n        /*\n        if (state === \"signIn\"){\n            var pwdService = Package[\"accounts-password\"] !== undefined;\n            if (!pwdService)\n                return true;\n        }\n        */\n        return false;\n    },\n};\n","AT.prototype.atInputRendered = function(){\n    var fieldId = this.data._id;\n    var inputQueryVal = Router.current().params.query[fieldId];\n    if (inputQueryVal)\n        this.$(\"input#at-field-\" + fieldId).val(inputQueryVal);\n};\n\nAT.prototype.atInputHelpers = {\n    disabled: function() {\n        return AccountsTemplates.disabled();\n    },\n    showLabels: function() {\n        return AccountsTemplates.options.showLabels;\n    },\n    displayName: function() {\n        var parentData = Template.parentData(1);\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        var displayName = this.getDisplayName(state);\n        return T9n.get(displayName, markIfMissing=false);\n    },\n    optionalText: function(){\n        return \"(\" + T9n.get(AccountsTemplates.texts.optionalField, markIfMissing=false) + \")\";\n    },\n    templateName: function() {\n        if (this.type === \"checkbox\")\n            return \"atCheckboxInput\";\n        if (this.type === \"select\")\n            return \"atSelectInput\";\n        if (this.type === \"radio\")\n            return \"atRadioInput\";\n        if (this.type === \"hidden\")\n            return \"atHiddenInput\";\n        return \"atTextInput\";\n    },\n    values: function(){\n        var id = this._id;\n        return _.map(this.select, function(select){\n            var s = _.clone(select);\n            s._id = id + \"-\" + select.value;\n            s.id = id;\n            return s;\n        });\n    },\n    errorText: function() {\n        var err = this.getStatus();\n        return T9n.get(err, markIfMissing=false);\n    },\n    placeholder: function() {\n        if (AccountsTemplates.options.showPlaceholders) {\n            var parentData = Template.parentData(1);\n            var state = (parentData && parentData.state) || AccountsTemplates.getState();\n            var placeholder = this.getPlaceholder(state);\n            return T9n.get(placeholder, markIfMissing=false);\n        }\n    },\n};\n\nAT.prototype.atInputEvents = {\n    \"focusout input\": function(event, t){\n        // Client-side only validation\n        if (!this.validation)\n            return;\n        var parentData = Template.parentData(1);\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        // No validation during signIn\n        if (state === \"signIn\")\n            return;\n        var fieldId = this._id;\n        var rawValue = this.getValue(t);\n        var value = this.fixValue(rawValue);\n        // Possibly updates the input value\n        if (value !== rawValue)\n            this.setValue(t, value);\n        // Special case for password confirmation\n        if (value && fieldId === \"password_again\"){\n            if (value !== $(\"#at-field-password\").val())\n                return this.setError(AccountsTemplates.texts.errors.pwdMismatch);\n        }\n        this.validate(value);\n    },\n    \"keyup input\": function(event, t){\n        // Client-side only continuous validation\n        if (!this.continuousValidation)\n            return;\n        var parentData = Template.parentData(1);\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        // No validation during signIn\n        if (state === \"signIn\")\n            return;\n        var fieldId = this._id;\n        var rawValue = this.getValue(t);\n        var value = this.fixValue(rawValue);\n        // Possibly updates the input value\n        if (value !== rawValue)\n            this.setValue(t, value);\n        // Special case for password confirmation\n        if (value && fieldId === \"password_again\"){\n            if (value !== $(\"#at-field-password\").val())\n                return this.setError(AccountsTemplates.texts.errors.pwdMismatch);\n        }\n        this.validate(value);\n    },\n};\n","AT.prototype.atNavButtonHelpers = {\n    text: function(){\n        var key = Meteor.user() ? AccountsTemplates.texts.navSignOut : AccountsTemplates.texts.navSignIn;\n        return T9n.get(key, markIfMissing=false);\n    }\n};\n\nAT.prototype.atNavButtonEvents = {\n    'click #at-nav-button': function(event){\n        if (Meteor.user())\n            AccountsTemplates.logout();\n        else\n            Router.go('atSignIn');\n    },\n};","AT.prototype.atOauthHelpers = {\n    oauthService: function() {\n        return AccountsTemplates.oauthServices();\n    },\n};","AT.prototype.atPwdFormHelpers = {\n    disabled: function() {\n        return AccountsTemplates.disabled();\n    },\n    fields: function() {\n        var parentData = Template.parentData();\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        return _.filter(AccountsTemplates.getFields(), function(s) {\n            return _.contains(s.visible, state);\n        });\n    },\n    showForgotPasswordLink: function() {\n        var parentData = Template.parentData();\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        return state === \"signIn\" && AccountsTemplates.options.showForgotPasswordLink;\n    },\n};\n\nAT.prototype.atPwdFormEvents = {\n    // Form submit\n    \"submit #at-pwd-form\": function(event, t) {\n        event.preventDefault();\n        $(\"#at-btn\").blur();\n\n        AccountsTemplates.setDisabled(true);\n\n        var parentData = Template.parentData();\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        var preValidation = (state !== \"signIn\");\n\n        // Client-side pre-validation\n        // Validates fields values\n        // NOTE: This is the only place where password validation can be enforced!\n        var formData = {};\n        var someError = false;\n        var errList = [];\n        _.each(AccountsTemplates.getFields(), function(field){\n            // Considers only visible fields...\n            if (!_.contains(field.visible, state))\n                return;\n\n            var fieldId = field._id;\n            var rawValue = field.getValue(t);\n            var value = field.fixValue(rawValue);\n            // Possibly updates the input value\n            if (value !== rawValue)\n                field.setValue(t, value);\n            if (value !== undefined && value !== \"\")\n                formData[fieldId] = value;\n\n            // Validates the field value only if current state is not \"signIn\"\n            if (preValidation && field.getStatus() !== false){\n                var validationErr = field.validate(value, \"strict\");\n                if (validationErr) {\n                    if (field.negativeValidation)\n                        field.setError(validationErr);\n                    else{\n                        var fId = T9n.get(field.getDisplayName(), markIfMissing=false);\n                        //errList.push(fId + \": \" + err);\n                        errList.push({\n                            field: field.getDisplayName(),\n                            err: validationErr\n                        });\n                    }\n                    someError = true;\n                }\n                else\n                    field.setSuccess();\n            }\n        });\n        // Clears error and result\n        AccountsTemplates.clearError();\n        AccountsTemplates.clearResult();\n        // Possibly sets errors\n        if (someError){\n            if (errList.length)\n                AccountsTemplates.state.form.set(\"error\", errList);\n            AccountsTemplates.setDisabled(false);\n            return;\n        }\n\n        // Extracts username, email, and pwds\n        var current_password = formData.current_password;\n        var email = formData.email;\n        var password = formData.password;\n        var password_again = formData.password_again;\n        var username = formData.username;\n        var username_and_email = formData.username_and_email;\n        // Clears profile data removing username, email, and pwd\n        delete formData.current_password;\n        delete formData.email;\n        delete formData.password;\n        delete formData.password_again;\n        delete formData.username;\n        delete formData.username_and_email;\n\n        if (AccountsTemplates.options.confirmPassword){\n            // Checks passwords for correct match\n            if (password_again && password !== password_again){\n                var pwd_again = AccountsTemplates.getField(\"password_again\");\n                if (pwd_again.negativeValidation)\n                    pwd_again.setError(AccountsTemplates.texts.errors.pwdMismatch);\n                else\n                    AccountsTemplates.state.form.set(\"error\", [{\n                        field: pwd_again.getDisplayName(),\n                        err: AccountsTemplates.texts.errors.pwdMismatch\n                    }]);\n                AccountsTemplates.setDisabled(false);\n                return;\n            }\n        }\n\n        // -------\n        // Sign In\n        // -------\n        if (state === \"signIn\") {\n            var pwdOk = !!password;\n            var userOk = true;\n            var loginSelector;\n            if (email)\n                loginSelector = {email: email};\n            else if (username)\n                loginSelector = {username: username};\n            else if (username_and_email)\n                loginSelector = username_and_email;\n            else\n                userOk = false;\n\n            // Possibly exits if not both 'password' and 'username' are non-empty...\n            if (!pwdOk || !userOk){\n                AccountsTemplates.setDisabled(false);\n                return;\n            }\n\n            return Meteor.loginWithPassword(loginSelector, password, function(error) {\n                AccountsTemplates.submitCallback(error, state);\n            });\n        }\n\n        // -------\n        // Sign Up\n        // -------\n        if (state === \"signUp\") {\n            var hash = AccountsTemplates.hashPassword(password);\n            return Meteor.call(\"ATCreateUserServer\", {\n                username: username,\n                email: email,\n                password: hash,\n                profile: formData,\n            }, function(error){\n                AccountsTemplates.submitCallback(error, undefined, function(){\n                    if (AccountsTemplates.options.sendVerificationEmail && AccountsTemplates.options.enforceEmailVerification){\n                        AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.singUpVerifyEmail);\n                        // Cleans up input fields' content\n                        _.each(AccountsTemplates.getFields(), function(field){\n                            // Considers only visible fields...\n                            if (!_.contains(field.visible, state))\n                                return;\n                            var fieldId = field._id;\n                            t.$(\"#at-field-\" + fieldId).val(\"\");\n                        });\n                        AccountsTemplates.setDisabled(false);\n                        return;\n                    }\n                    var loginSelector;\n                    if (email)\n                        loginSelector = {email: email};\n                    else if (username)\n                        loginSelector = {username: username};\n                    else\n                        loginSelector = username_and_email;\n                    Meteor.loginWithPassword(loginSelector, password, function(error) {\n                        AccountsTemplates.submitCallback(error, state, function(){\n                            AccountsTemplates.setState(\"signIn\");\n                        });\n                    });\n                });\n            });\n        }\n\n        //----------------\n        // Forgot Password\n        //----------------\n        if (state === \"forgotPwd\"){\n            return Accounts.forgotPassword({\n                email: email\n            }, function(error) {\n                AccountsTemplates.submitCallback(error, state, function(){\n                    AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.emailSent);\n                    t.$(\"#at-field-email\").val(\"\");\n                });\n            });\n        }\n\n        //--------------------------------\n        // Reset Password / Enroll Account\n        //--------------------------------\n        if (state === \"resetPwd\" || state === \"enrollAccount\") {\n            return Accounts.resetPassword(AccountsTemplates.paramToken, password, function(error) {\n                AccountsTemplates.submitCallback(error, state, function(){\n                    var pwd_field_id;\n                    if (state === \"resetPwd\")\n                        AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.pwdReset);\n                    else // Enroll Account\n                        AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.pwdSet);\n                    t.$(\"#at-field-password\").val(\"\");\n                    if (AccountsTemplates.options.confirmPassword)\n                        t.$(\"#at-field-password_again\").val(\"\");\n                });\n            });\n        }\n\n        //----------------\n        // Change Password\n        //----------------\n        if (state === \"changePwd\"){\n            return Accounts.changePassword(current_password, password, function(error) {\n                AccountsTemplates.submitCallback(error, state, function(){\n                    AccountsTemplates.state.form.set(\"result\", AccountsTemplates.texts.info.pwdChanged);\n                    t.$(\"#at-field-current_password\").val(\"\");\n                    t.$(\"#at-field-password\").val(\"\");\n                    if (AccountsTemplates.options.confirmPassword)\n                        t.$(\"#at-field-password_again\").val(\"\");\n                });\n            });\n        }\n    },\n};\n","AT.prototype.atPwdFormBtnHelpers = {\n    submitDisabled: function(){\n        var errors = _.map(AccountsTemplates.getFields(), function(field){\n            return field.hasError();\n        });\n        if (_.some(errors))\n            return \"disabled\";\n    },\n    buttonText: function() {\n        var parentData = Template.parentData();\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        return T9n.get(AccountsTemplates.texts.button[state], markIfMissing=false);\n    },\n};\n","AT.prototype.atPwdLinkHelpers = {\n    disabled: function() {\n        return AccountsTemplates.disabled();\n    },\n    forgotPwdLink: function(){\n        return AccountsTemplates.getRoutePath(\"forgotPwd\");\n    },\n    preText: function(){\n        return T9n.get(AccountsTemplates.texts.pwdLink_pre, markIfMissing=false);\n    },\n    linkText: function(){\n        return T9n.get(AccountsTemplates.texts.pwdLink_link, markIfMissing=false);\n    },\n    suffText: function(){\n        return T9n.get(AccountsTemplates.texts.pwdLink_suff, markIfMissing=false);\n    },\n};\n\nAT.prototype.atPwdLinkEvents = {\n    \"click #at-forgotPwd\": function(event, t) {\n        event.preventDefault();\n        AccountsTemplates.linkClick(\"forgotPwd\");\n    },\n};","AT.prototype.atResultHelpers = {\n    result: function() {\n        var resultText = AccountsTemplates.state.form.get(\"result\");\n        if (resultText)\n            return T9n.get(resultText, markIfMissing=false);\n    },\n};","AT.prototype.atSepHelpers = {\n    sepText: function(){\n        return T9n.get(AccountsTemplates.texts.sep, markIfMissing=false);\n    },\n};","AT.prototype.atSigninLinkHelpers = {\n    disabled: function() {\n        return AccountsTemplates.disabled();\n    },\n    signInLink: function(){\n        return AccountsTemplates.getRoutePath(\"signIn\");\n    },\n    preText: function(){\n        return T9n.get(AccountsTemplates.texts.signInLink_pre, markIfMissing=false);\n    },\n    linkText: function(){\n        return T9n.get(AccountsTemplates.texts.signInLink_link, markIfMissing=false);\n    },\n    suffText: function(){\n        return T9n.get(AccountsTemplates.texts.signInLink_suff, markIfMissing=false);\n    },\n};\n\nAT.prototype.atSigninLinkEvents = {\n    \"click #at-signIn\": function(event, t) {\n        event.preventDefault();\n        AccountsTemplates.linkClick(\"signIn\");\n    },\n};","AT.prototype.atSignupLinkHelpers = {\n    disabled: function() {\n        return AccountsTemplates.disabled();\n    },\n    signUpLink: function(){\n        return AccountsTemplates.getRoutePath(\"signUp\");\n    },\n    preText: function(){\n        return T9n.get(AccountsTemplates.texts.signUpLink_pre, markIfMissing=false);\n    },\n    linkText: function(){\n        return T9n.get(AccountsTemplates.texts.signUpLink_link, markIfMissing=false);\n    },\n    suffText: function(){\n        return T9n.get(AccountsTemplates.texts.signUpLink_suff, markIfMissing=false);\n    },\n};\n\nAT.prototype.atSignupLinkEvents = {\n    \"click #at-signUp\": function(event, t) {\n        event.preventDefault();\n        AccountsTemplates.linkClick('signUp');\n    },\n};","AT.prototype.atSocialHelpers = {\n    disabled: function() {\n        if (AccountsTemplates.disabled())\n            return \"disabled\";\n        var user = Meteor.user();\n        if (user){\n            var numServices = 0;\n            if (user.services)\n                numServices = _.keys(user.services).length; // including \"resume\"\n            if (numServices === 2 && user.services[this._id])\n                return \"disabled\";\n        }\n    },\n    name: function(){\n        return this._id;\n    },\n    iconClass: function() {\n        var ic = AccountsTemplates.texts.socialIcons[this._id];\n        if (!ic)\n            ic = \"fa fa-\" + this._id;\n        return ic;\n    },\n    buttonText: function() {\n        var service = this;\n        var serviceName = this._id;\n        if (serviceName === \"meteor-developer\")\n            serviceName = \"meteor\";\n        serviceName = capitalize(serviceName);\n        if (!service.configured)\n            return T9n.get(AccountsTemplates.texts.socialConfigure, markIfMissing=false) + \" \" + serviceName;\n        var showAddRemove = AccountsTemplates.options.showAddRemoveServices;\n        var user = Meteor.user();\n        if (user && showAddRemove){\n            if (user.services && user.services[this._id]){\n                var numServices = _.keys(user.services).length; // including \"resume\"\n                if (numServices === 2)\n                    return serviceName;\n                else\n                    return T9n.get(AccountsTemplates.texts.socialRemove, markIfMissing=false) + \" \" + serviceName;\n            } else\n                    return T9n.get(AccountsTemplates.texts.socialAdd, markIfMissing=false) + \" \" + serviceName;\n        }\n        var parentData = Template.parentData(1);\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        var prefix = state === \"signIn\" ?\n            T9n.get(AccountsTemplates.texts.socialSignIn, markIfMissing=false) :\n            T9n.get(AccountsTemplates.texts.socialSignUp, markIfMissing=false);\n        return prefix + \" \" + T9n.get(AccountsTemplates.texts.socialWith, markIfMissing=false) + \" \" + serviceName;\n    },\n};\n\nAT.prototype.atSocialEvents = {\n    \"click button\": function(event, t) {\n        event.preventDefault();\n        t.find(\"button\").blur();\n        if (AccountsTemplates.disabled())\n            return;\n        var user = Meteor.user();\n        if (user && user.services && user.services[this._id]){\n            var numServices = _.keys(user.services).length; // including \"resume\"\n            if (numServices === 2)\n                return;\n            else{\n                AccountsTemplates.setDisabled(true);\n                Meteor.call(\"ATRemoveService\", this._id, function(error){\n                    AccountsTemplates.setDisabled(false);\n                });\n            }\n        } else {\n            AccountsTemplates.setDisabled(true);\n            var parentData = Template.parentData(1);\n            var state = (parentData && parentData.state) || AccountsTemplates.getState();\n            var serviceName = this._id;\n            var methodName;\n            if (serviceName === 'meteor-developer')\n                methodName = \"loginWithMeteorDeveloperAccount\";\n            else\n                methodName = \"loginWith\" + capitalize(serviceName);\n            var loginWithService = Meteor[methodName];\n            options = {};\n            if (Accounts.ui) {\n                if (Accounts.ui._options.requestPermissions[serviceName]) {\n                    options.requestPermissions = Accounts.ui._options.requestPermissions[serviceName];\n                }\n                if (Accounts.ui._options.requestOfflineToken[serviceName]) {\n                    options.requestOfflineToken = Accounts.ui._options.requestOfflineToken[serviceName];\n                }\n            }\n            loginWithService(options, function(err) {\n                AccountsTemplates.setDisabled(false);\n                if (err && err instanceof Accounts.LoginCancelledError) {\n                    // do nothing\n                }\n                else if (err && err instanceof ServiceConfiguration.ConfigError) {\n                    if (Accounts._loginButtonsSession)\n                        return Accounts._loginButtonsSession.configureService(serviceName);\n                }\n                else\n                    AccountsTemplates.submitCallback(err, state);\n            });\n        }\n    },\n};\n","AT.prototype.atTermsLinkHelpers = {\n    disabled: function() {\n        return AccountsTemplates.disabled();\n    },\n    text: function(){\n        return T9n.get(AccountsTemplates.texts.termsPreamble, markIfMissing=false);\n    },\n    privacyUrl: function(){\n        return AccountsTemplates.options.privacyUrl;\n    },\n    privacyLinkText: function(){\n        return T9n.get(AccountsTemplates.texts.termsPrivacy, markIfMissing=false);\n    },\n    showTermsAnd: function(){\n        return !!AccountsTemplates.options.privacyUrl && !!AccountsTemplates.options.termsUrl;\n    },\n    and: function(){\n        return T9n.get(AccountsTemplates.texts.termsAnd, markIfMissing=false);\n    },\n    termsUrl: function(){\n        return AccountsTemplates.options.termsUrl;\n    },\n    termsLinkText: function(){\n        return T9n.get(AccountsTemplates.texts.termsTerms, markIfMissing=false);\n    },\n};\n\nAT.prototype.atTermsLinkEvents = {\n    \"click a\": function(event) {\n        if (AccountsTemplates.disabled())\n            event.preventDefault();\n    },\n};","AT.prototype.atTitleHelpers = {\n    title: function(){\n        var parentData = Template.parentData();\n        var state = (parentData && parentData.state) || AccountsTemplates.getState();\n        return T9n.get(AccountsTemplates.texts.title[state], markIfMissing=false);\n    },\n};","\nMeteor.methods({\n    ATRemoveService: function(service_name){\n        var userId = this.userId;\n        if (userId){\n            var user = Meteor.users.findOne(userId);\n            var numServices = _.keys(user.services).length; // including \"resume\"\n            if (numServices === 2)\n                throw new Meteor.Error(403, \"Cannot remove the only active service!\", {});\n            var unset = {};\n            unset[\"services.\" + service_name] = \"\";\n            Meteor.users.update(userId, {$unset: unset});\n        }\n    },\n});\n\n\nif (Meteor.isServer) {\n    Meteor.methods({\n        ATCreateUserServer: function(options){\n            if (AccountsTemplates.options.forbidClientAccountCreation)\n                throw new Meteor.Error(403, \"Client side accounts creation is disabled!!!\");\n            // createUser() does more checking.\n            check(options, Object);\n            var allFieldIds = AccountsTemplates.getFieldIds();\n            // Picks-up whitelisted fields for profile\n            var profile = options.profile;\n            profile = _.pick(profile, allFieldIds);\n            profile = _.omit(profile, \"username\", \"email\", \"password\");\n            // Validates fields\" value\n            var signupInfo = _.clone(profile);\n            if (options.username)\n                signupInfo.username = options.username;\n            if (options.email)\n                signupInfo.email = options.email;\n            if (options.password)\n                signupInfo.password = options.password;\n            var validationErrors = {};\n            var someError = false;\n\n            // Validates fields values\n            _.each(AccountsTemplates.getFields(), function(field){\n                var fieldId = field._id;\n                var value = signupInfo[fieldId];\n                if (fieldId === \"password\"){\n                    // Can\"t Pick-up password here\n                    // NOTE: at this stage the password is already encripted,\n                    //       so there is no way to validate it!!!\n                    check(value, Object);\n                    return;\n                }\n                var validationErr = field.validate(value, \"strict\");\n                if (validationErr) {\n                    validationErrors[fieldId] = validationErr;\n                    someError = true;\n                }\n            });\n            if (someError)\n                throw new Meteor.Error(403, \"Validation Errors\", validationErrors);\n\n            // Possibly removes the profile field\n            if (_.isEmpty(options.profile))\n                delete options.profile;\n\n            // Create user. result contains id and token.\n            var userId = Accounts.createUser(options);\n            // safety belt. createUser is supposed to throw on error. send 500 error\n            // instead of sending a verification email with empty userid.\n            if (! userId)\n                throw new Error(\"createUser failed to insert new user\");\n\n            // Send a email address verification email in case the context permits it\n            // and the specific configuration flag was set to true\n            if (options.email && AccountsTemplates.options.sendVerificationEmail)\n                Accounts.sendVerificationEmail(userId, options.email);\n        },\n    });\n}"]}