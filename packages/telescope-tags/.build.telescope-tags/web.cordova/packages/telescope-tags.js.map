{"version":3,"file":"/packages/telescope-tags.js","sources":["telescope-tags/lib/tags.js","telescope-tags/lib/client/routes.js","telescope-tags/lib/client/views/categories.html","telescope-tags/lib/client/views/categories.js","telescope-tags/lib/client/views/category_item.html","telescope-tags/lib/client/views/category_item.js","telescope-tags/lib/client/views/categories_menu.html","telescope-tags/lib/client/views/categories_menu.js","telescope-tags/lib/client/views/post_categories.html","telescope-tags/lib/client/views/post_categories.js"],"names":[],"mappings":";;;;;;;;AAAA,mC;AACA,O;AACA,iB;AACA,kB;AACA,I;AACA,U;AACA,iB;AACA,kB;AACA,I;AACA,S;AACA,gB;AACA,I;AACA,S;AACA,gB;AACA,Q;AACA,G;;AAEA,kD;AACA,wB;AACA,G;;AAEA,gC;AACA,6C;AACA,U;AACA,8C;AACA,4C;AACA,I;AACA,C;;AAEA,2C;AACA,kB;AACA,6B;AACA,U;AACA,G;AACA,E;AACA,+C;AACA,kC;;AAEA,wF;AACA,qB;AACA,G;AACA,+B;AACA,qB;AACA,6B;AACA,oB;AACA,K;AACA,G;AACA,E;;AAEA,kD;AACA,6B;AACA,qD;AACA,mC;AACA,+D;AACA,K;AACA,oB;AACA,C;;AAEA,qD;AACA,mD;;AAEA,4B;AACA,oB;AACA,uB;AACA,uB;AACA,uB;AACA,K;;AAEA,kB;AACA,iC;AACA,2B;AACA,oD;AACA,mG;AACA,iD;AACA,2B;AACA,K;AACA,K;AACA,G;;AAEA,gC;AACA,uC;AACA,E;;;;;;;;;;;;;;;;;;ACjFA,wC;;AAEA,e;AACA,sB;AACA,qB;AACA,G;;AAEA,4B;;AAEA,yE;;AAEA,wD;AACA,oB;AACA,K;;;AAGA,e;;AAEA,2C;AACA,2B;AACA,wC;AACA,+B;AACA,oD;AACA,K;AACA,K;;AAEA,qB;;AAEA,+B;AACA,sB;AACA,K;;;AAGA,G;;;;;;;;;;;;;;;;;;;AChCA,mC;AACA,0E;AACA,kB;AACA,mB;AACA,kD;AACA,+kB;AACA,qD;AACA,iB;AACA,2D;AACA,c;AACA,6D;AACA,Q;AACA,mB;AACA,2C;AACA,kD;AACA,S;AACA,qB;AACA,yB;AACA,I;;;;;;;;;;;;;;;;;;;ACnBA,4B;AACA,+C;AACA,2B;AACA,8D;AACA,M;AACA,+B;AACA,yC;AACA,K;AACA,K;;AAEA,8C;AACA,4C;AACA,yB;;AAEA,kC;AACA,yD;AACA,0E;AACA,+B;AACA,M;AACA,+B;AACA,mB;AACA,qB;AACA,kB;AACA,wC;AACA,kB;AACA,6B;AACA,mC;AACA,4B;AACA,c;AACA,6B;AACA,mE;AACA,S;AACA,S;AACA,K;AACA,K;AACA,G;;;;;;;;;;;;;;;;;;;AClCA,qC;AACA,8E;AACA,kB;AACA,iE;AACA,mC;AACA,iH;AACA,uB;AACA,mC;AACA,6B;AACA,oB;AACA,iE;AACA,M;AACA,iB;AACA,uB;AACA,qD;AACA,M;AACA,uB;AACA,oC;AACA,+B;AACA,oB;AACA,kE;AACA,M;AACA,mB;AACA,uB;AACA,sD;AACA,M;AACA,oB;AACA,kD;AACA,kC;AACA,uC;AACA,mD;AACA,2C;AACA,I;;;;;;;;;;;;;;;;;;;ACjCA,4B;AACA,gD;AACA,8C;AACA,yB;AACA,yC;AACA,8C;AACA,0D;AACA,+B;AACA,e;AACA,sF;AACA,Y;AACA,sC;AACA,O;AACA,wE;AACA,oB;AACA,mC;AACA,S;AACA,S;AACA,K;AACA,K;AACA,G;;;;;;;;;;;;;;;;;;;ACnBA,uC;AACA,kF;AACA,kB;AACA,8B;AACA,wD;AACA,iB;AACA,iC;AACA,0D;AACA,2B;AACA,+C;AACA,e;AACA,8B;AACA,mE;AACA,+B;AACA,8B;AACA,8B;AACA,mB;AACA,iC;AACA,8C;AACA,uD;AACA,mB;AACA,iD;AACA,sC;AACA,0B;AACA,iE;AACA,S;AACA,gC;AACA,uD;AACA,6B;AACA,wD;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;AChCA,4B;AACA,mD;AACA,8B;AACA,4E;AACA,M;AACA,2B;AACA,8D;AACA,M;AACA,+B;AACA,uC;AACA,K;AACA,K;AACA,G;;;;;;;;;;;;;;;;;;;;ACXA,uC;AACA,kF;AACA,kB;AACA,gC;AACA,qD;AACA,iB;AACA,+B;AACA,wB;AACA,+D;AACA,Q;AACA,2B;AACA,sF;AACA,O;AACA,8B;AACA,qD;AACA,kB;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;AClBA,4B;AACA,mD;AACA,6B;AACA,uC;AACA,K;AACA,K;AACA,G","sourcesContent":["categorySchema = new SimpleSchema({\n _id: {\n    type: String,\n    optional: true\n  },\n  order: {\n    type: Number,\n    optional: true\n  },\n  slug: {\n    type: String\n  },\n  name: {\n    type: String\n  },    \n});\n\nCategories = new Meteor.Collection(\"categories\", {\n  schema: categorySchema\n});\n\n// category post list parameters\nviewParameters.category = function (terms) { \n  return {\n    find: {'categories.slug': terms.category},\n    options: {sort: {sticky: -1, score: -1}}\n  };\n}\n\n// push \"categories\" modules to postHeading\npostHeading.push({\n  template: 'postCategories',\n  order: 3\n});\n  \n// push \"categoriesMenu\" template to primaryNav\nprimaryNav.push('categoriesMenu');\n\n// push \"categories\" property to addToPostSchema, so that it's later added to postSchema\naddToPostSchema.push(\n  {\n    propertyName: 'categories',\n    propertySchema: {\n      type: [categorySchema],\n      optional: true\n    }\n  }\n);\n\nvar getCheckedCategories = function (properties) {\n  properties.categories = [];\n  $('input[name=category]:checked').each(function() {\n    var categoryId = $(this).val();\n    properties.categories.push(Categories.findOne(categoryId));\n  });\n  return properties;\n}\n\npostSubmitClientCallbacks.push(getCheckedCategories);\npostEditClientCallbacks.push(getCheckedCategories);\n\nMeteor.startup(function () {\n  Categories.allow({\n    insert: isAdminById\n  , update: isAdminById\n  , remove: isAdminById\n  });\n\n  Meteor.methods({\n    category: function(category){\n      console.log(category)\n      if (!Meteor.user() || !isAdmin(Meteor.user()))\n        throw new Meteor.Error(i18n.t('You need to login and be an admin to add a new category.'));\n      var categoryId=Categories.insert(category);\n      return category.name;\n    }\n  });\n});\n\ngetCategoryUrl = function(slug){\n  return getSiteUrl()+'category/'+slug;\n};","preloadSubscriptions.push('categories');\n\nadminNav.push({\n  route: 'categories',\n  label: 'Categories'\n});\n\nMeteor.startup(function () {\n\n  Router.onBeforeAction(Router._filters.isAdmin, {only: ['categories']});\n\n  PostsCategoryController = PostsListController.extend({\n    view: 'category'\n  });\n\n\n  // Categories\n\n  Router.route('/category/:slug/:limit?', {\n    name: 'posts_category',\n    controller: PostsCategoryController,\n    onAfterAction: function() {\n      Session.set('categorySlug', this.params.slug);\n    }\n  });\n\n  // Categories Admin\n\n  Router.route('/categories', {\n    name: 'categories'\n  });\n\n\n});","\nTemplate.__checkName(\"categories\");\nTemplate[\"categories\"] = new Template(\"Template.categories\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"grid-small grid-module dialog admin\"\n  }, HTML.Raw('\\n    <h2>Categories</h2>\\n    <form class=\"form-block\">\\n      <h3>Add new category</h3>\\n      <div class=\"control-group\">\\n        <label>Name</label>\\n        <div class=\"controls\"><input id=\"name\" type=\"text\" value=\"\"></div>\\n      </div>\\n      <div class=\"control-group\">\\n        <label>Order</label>\\n        <div class=\"controls\"><input id=\"order\" type=\"number\" value=\"\"></div>\\n      </div>\\n      <div class=\"form-actions\">\\n        <input type=\"submit\" class=\"button\" value=\"Submit\">\\n      </div>\\n    </form>\\n    '), HTML.UL(\"\\n      \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"categories\"));\n  }, function() {\n    return [ \"\\n        \", Blaze._TemplateWith(function() {\n      return {\n        template: Spacebars.call(view.lookup(\"categoryItem\"))\n      };\n    }, function() {\n      return Spacebars.include(function() {\n        return Spacebars.call(Template.__dynamic);\n      });\n    }), \"\\n      \" ];\n  }), \"\\n    \"), \"\\n  \");\n}));\n","Meteor.startup(function () {\n  Template[getTemplate('categories')].helpers({\n    categories: function(){\n      return Categories.find({}, {sort: {order: 1, name: 1}});\n    },\n    categoryItem: function () {\n      return getTemplate('categoryItem');\n    }\n  });\n\n  Template[getTemplate('categories')].events({\n    'click input[type=submit]': function(e){\n      e.preventDefault();\n\n      var name = $('#name').val();\n      var numberOfCategories = Categories.find().count();\n      var order = parseInt($('#order').val()) || (numberOfCategories + 1);\n      var slug = slugify(name);\n      \n      Meteor.call('category', {\n        name: name,\n        order: order,\n        slug: slug\n      }, function(error, categoryName) {\n        if(error){\n          console.log(error);\n          throwError(error.reason);\n          clearSeenErrors();\n        }else{\n          $('#name').val('');\n          // throwError('New category \"'+categoryName+'\" created');\n        }\n      });\n    }\n  });\n});","\nTemplate.__checkName(\"categoryItem\");\nTemplate[\"categoryItem\"] = new Template(\"Template.categoryItem\", (function() {\n  var view = this;\n  return HTML.LI(\"      \\n\t\t\", HTML.FORM(\"\\n        \", HTML.DIV({\n    \"class\": \"control-group inline\"\n  }, \"\\n          \", HTML.Raw('<a class=\"button submit edit-link\" href=\"#\">Save</a>'), \"\\n          \", HTML.DIV({\n    \"class\": \"controls\"\n  }, \"\\n            \", HTML.INPUT({\n    \"class\": \"category-name\",\n    id: function() {\n      return [ \"name_\", Spacebars.mustache(view.lookup(\"_id\")) ];\n    },\n    type: \"text\",\n    value: function() {\n      return Spacebars.mustache(view.lookup(\"name\"));\n    },\n    placeholder: \"Name\"\n  }), \"\\n            \", HTML.INPUT({\n    \"class\": \"category-number\",\n    id: function() {\n      return [ \"order_\", Spacebars.mustache(view.lookup(\"_id\")) ];\n    },\n    type: \"number\",\n    value: function() {\n      return Spacebars.mustache(view.lookup(\"order\"));\n    },\n    placeholder: \"0\"\n  }), \"\\n          \"), \"\\n          \", HTML.SPAN({\n    \"class\": \"category-slug small\"\n  }, \"Slug: /\", Blaze.View(function() {\n    return Spacebars.mustache(view.lookup(\"slug\"));\n  })), \"\\n        \"), \"\\n      \"), \"\\n  \");\n}));\n","Meteor.startup(function () {\n  Template[getTemplate('categoryItem')].events({\n    'click .edit-link': function(e, instance){\n      e.preventDefault();\n      var categoryId = instance.data._id;\n      var name = $('#name_'+categoryId).val();\n      var order = parseInt($('#order_'+categoryId).val());\n      var slug = slugify(name);\n      if(name){\n        Categories.update(categoryId,{ $set: {name: name, slug: slug, order: order}});\n      }else{\n        Categories.remove(categoryId);\n      }\n      Meteor.call('updateCategoryInPosts', categoryId, function(error) {\n        if (error) {\n          throwError(error.reason);\n        }\n      });\n    }\n  });\n});","\nTemplate.__checkName(\"categoriesMenu\");\nTemplate[\"categoriesMenu\"] = new Template(\"Template.categoriesMenu\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"hasCategories\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"dropdown categories-menu header-submodule\"\n    }, \"\\n      \", HTML.A({\n      \"class\": \"categories dropdown-top-level\",\n      href: \"/\"\n    }, Blaze.View(function() {\n      return Spacebars.mustache(view.lookup(\"i18n\"), \"Categories\");\n    })), \"\\n      \", HTML.DIV({\n      \"class\": \"dropdown-menu\"\n    }, \"\\n        \", HTML.UL({\n      role: \"menu\",\n      \"aria-labelledby\": \"dLabel\"\n    }, \"\\n          \", Blaze.Each(function() {\n      return Spacebars.call(view.lookup(\"categories\"));\n    }, function() {\n      return [ \"\\n            \", HTML.LI(HTML.A({\n        \"class\": \"dropdown-sub-level\",\n        href: function() {\n          return Spacebars.mustache(view.lookup(\"categoryLink\"));\n        }\n      }, Blaze.View(function() {\n        return Spacebars.mustache(view.lookup(\"name\"));\n      }))), \"\\n          \" ];\n    }), \"\\n        \"), \"\\n      \"), \"\\n    \"), \"\\n  \" ];\n  });\n}));\n","Meteor.startup(function () {\n  Template[getTemplate('categoriesMenu')].helpers({\n    hasCategories: function(){\n      return typeof Categories !== 'undefined' && Categories.find().count();\n    },\n    categories: function(){\n      return Categories.find({}, {sort: {order: 1, name: 1}});\n    },\n    categoryLink: function () {\n      return getCategoryUrl(this.slug);\n    }\n  });\n});\n","\nTemplate.__checkName(\"postCategories\");\nTemplate[\"postCategories\"] = new Template(\"Template.postCategories\", (function() {\n  var view = this;\n  return Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"categories\"));\n  }, function() {\n    return [ \"\\n    \", HTML.A({\n      href: function() {\n        return Spacebars.mustache(view.lookup(\"categoryLink\"));\n      },\n      \"class\": function() {\n        return [ \"post-category category-\", Spacebars.mustache(view.lookup(\"slug\")) ];\n      }\n    }, Blaze.View(function() {\n      return Spacebars.mustache(view.lookup(\"name\"));\n    })), \"\\n  \" ];\n  });\n}));\n","Meteor.startup(function () {\n  Template[getTemplate('postCategories')].helpers({\n    categoryLink: function(){\n      return getCategoryUrl(this.slug);\n    }\n  });\n});"]}