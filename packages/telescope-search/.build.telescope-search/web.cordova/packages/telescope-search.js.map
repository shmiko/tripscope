{"version":3,"file":"/packages/telescope-search.js","sources":["telescope-search/lib/search.js","telescope-search/lib/client/routes.js","telescope-search/lib/client/views/search.html","telescope-search/lib/client/views/search.js","telescope-search/lib/client/views/search_logs.html","telescope-search/lib/client/views/search_logs.js"],"names":[],"mappings":";;;;;;;;AAAA,uC;AACA,0B;;AAEA,8C;AACA,4B;AACA,U;AACA,mB;AACA,oB;AACA,M;AACA,gB;AACA,gB;AACA,M;AACA,c;AACA,kB;AACA,K;AACA,I;AACA,G;;AAEA,2B;AACA,kB;AACA,uB;AACA,uB;AACA,K;AACA,G;;AAEA,8B;AACA,0D;AACA,sF;AACA,uD;AACA,0B;;AAEA,iC;AACA,qB;AACA,2B;;AAEA,qD;AACA,W;AACA,Y;AACA,sD;AACA,oD;AACA,oD;AACA,O;AACA,K;AACA,K;AACA,oB;AACA,C;;;;;;;;;;;;;;;;;;;AC7CA,e;AACA,sB;AACA,sB;AACA,G;;;AAGA,4B;;AAEA,sD;AACA,mB;AACA,gC;AACA,+B;AACA,kD;AACA,O;AACA,K;AACA,K;;AAEA,mE;;AAEA,W;;AAEA,mC;AACA,mB;AACA,yC;AACA,K;;AAEA,gB;;AAEA,iC;AACA,uB;AACA,yB;AACA,2C;AACA,2B;AACA,wC;AACA,O;AACA,iD;AACA,M;AACA,uB;AACA,wD;AACA,M;AACA,oB;AACA,K;;AAEA,G;;;;;;;;;;;;;;;;;;;;AC1CA,+B;AACA,kE;AACA,kB;AACA,8B;AACA,oD;AACA,iB;AACA,iC;AACA,2B;AACA,uG;AACA,O;AACA,+B;AACA,mB;AACA,qB;AACA,8B;AACA,4B;AACA,yB;AACA,8D;AACA,O;AACA,4B;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;ACrBA,qE;AACA,wB;AACA,gB;AACA,gC;AACA,yB;AACA,qC;AACA,I;AACA,K;;AAEA,4B;AACA,2C;AACA,4B;AACA,oC;AACA,M;AACA,8B;AACA,wC;AACA,M;AACA,mC;AACA,yD;AACA,K;AACA,K;;AAEA,0C;AACA,+C;AACA,yB;AACA,kC;AACA,kC;AACA,kB;AACA,gF;AACA,kC;AACA,uC;AACA,yD;AACA,Y;AACA,sG;AACA,yB;AACA,0C;AACA,uC;;AAEA,oC;AACA,6D;AACA,+E;AACA,4C;AACA,0D;AACA,qC;AACA,W;AACA,0C;;AAEA,iB;AACA,O;AACA,K;AACA,K;AACA,G;;;;;;;;;;;;;;;;;;;;AClDA,mC;AACA,0E;AACA,kB;AACA,mB;AACA,kD;AACA,6R;AACA,4C;AACA,iB;AACA,kD;AACA,sD;AACA,mB;AACA,0C;AACA,qC;AACA,sC;AACA,oB;AACA,0C;AACA,8B;AACA,gC;AACA,0D;AACA,4C;AACA,+B;AACA,gC;AACA,8D;AACA,oE;AACA,iF;AACA,wD;AACA,0D;AACA,wD;AACA,yC;AACA,kD;AACA,+B;AACA,yB;AACA,yB;AACA,sB;AACA,4D;AACA,K;AACA,4B;AACA,gE;AACA,0B;AACA,I;;;;;;;;;;;;;;;;;;;ACxCA,4B;AACA,+C;AACA,0B;AACA,uD;AACA,M;AACA,0B;AACA,6D;AACA,yB;AACA,M;AACA,8B;AACA,qD;AACA,kE;AACA,iE;;AAEA,4B;AACA,oB;AACA,uB;AACA,qB;AACA,S;AACA,iB;AACA,M;AACA,4B;AACA,sH;AACA,M;AACA,4B;AACA,2D;AACA,8B;AACA,Q;AACA,K;AACA,G","sourcesContent":["// push \"search\" template to primaryNav\nprimaryNav.push('search');\n\nSearches = new Meteor.Collection(\"searches\", {\n  schema: new SimpleSchema({\n    _id: {\n      type: String,\n      optional: true\n    },\n    timestamp: {\n      type: Date\n    },\n    keyword: {\n      type: String\n    }\n  })\n});\n\nMeteor.startup(function() {\n  Searches.allow({\n    update: isAdminById\n  , remove: isAdminById\n  });\n});\n\n// search post list parameters\nviewParameters.search = function (terms, baseParameters) {\n  // if query is empty, just return parameters that will result in an empty collection\n  if(typeof terms.query == 'undefined' || !terms.query)\n    return {find:{_id: 0}}\n\n  // log current search in the db\n  if(Meteor.isServer)\n    logSearch(terms.query);\n\n  var parameters = deepExtend(true, baseParameters, {\n    find: {\n      $or: [\n        {title: {$regex: terms.query, $options: 'i'}},\n        {url: {$regex: terms.query, $options: 'i'}},\n        {body: {$regex: terms.query, $options: 'i'}}\n      ]\n    }\n  });\n  return parameters;\n}\n","adminNav.push({\n  route: 'searchLogs',\n  label: 'Search Logs'\n});\n\n\nMeteor.startup(function () {\n\n  PostsSearchController = PostsListController.extend({\n    view: 'search',\n    onBeforeAction: function() {\n      if (\"q\" in this.params) {\n        Session.set(\"searchQuery\", this.params.q);\n      }\n    }\n  });\n\n  Router.onBeforeAction(Router._filters.isAdmin, {only: ['logs']});\n\n  // Search\n\n  Router.route('/search/:limit?', {\n    name: 'search',\n    controller: PostsSearchController    \n  });\n\n  // Search Logs\n\n  Router.route('/logs/:limit?', {\n    name: 'searchLogs',\n    waitOn: function () {\n      var limit = this.params.limit || 100;\n      if(Meteor.isClient) {\n        Session.set('logsLimit', limit);\n      }\n      return Meteor.subscribe('searches', limit);\n    },\n    data: function () {\n      return Searches.find({}, {sort: {timestamp: -1}});\n    },\n    fastRender: true\n  });\n\n});\n","\nTemplate.__checkName(\"search\");\nTemplate[\"search\"] = new Template(\"Template.search\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"canSearch\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": function() {\n        return [ \"search \", Spacebars.mustache(view.lookup(\"searchQueryEmpty\")), \" header-submodule\" ];\n      }\n    }, \"\\n      \", HTML.INPUT({\n      id: \"search\",\n      type: \"search\",\n      \"class\": \"search-field\",\n      placeholder: \"search\",\n      value: function() {\n        return Spacebars.mustache(view.lookup(\"searchQuery\"));\n      }\n    }), \"\\n    \"), \"\\n  \" ];\n  });\n}));\n","// see: http://stackoverflow.com/questions/1909441/jquery-keyup-delay\nvar delay = (function(){\n  var timer = 0;\n  return function(callback, ms){\n    clearTimeout (timer);\n    timer = setTimeout(callback, ms);\n  };\n})();\n\nMeteor.startup(function () {\n  Template[getTemplate('search')].helpers({\n    canSearch: function () {\n      return canView(Meteor.user());\n    },\n    searchQuery: function () {\n      return Session.get(\"searchQuery\");\n    },\n    searchQueryEmpty: function () {\n      return !!Session.get(\"searchQuery\") ? '' : 'empty';\n    }\n  });\n\n  Template[getTemplate('search')].events({\n    'keyup, search .search-field': function(e){\n      e.preventDefault();\n      var val = $(e.target).val(),\n          $search = $('.search'); \n      if(val==''){\n        // if search field is empty, just do nothing and show an empty template \n        $search.addClass('empty');\n        Session.set('searchQuery', '');\n        Router.go('/search', null, {replaceState: true});\n      }else{\n        // if search field is not empty, add a delay to avoid firing new searches for every keystroke \n        delay(function(){\n          Session.set('searchQuery', val);\n          $search.removeClass('empty');\n\n          // Update the querystring.\n          var opts = {query: 'q=' + encodeURIComponent(val)};\n          // if we're already on the search page, do a replaceState. Otherwise,\n          // just use the pushState default.\n          if(getCurrentRoute().indexOf('/search') === 0) {\n            opts.replaceState = true;\n          }\n          Router.go('search', null, opts);\n\n        }, 700 );\n      }\n    }\n  });\n});\n","\nTemplate.__checkName(\"searchLogs\");\nTemplate[\"searchLogs\"] = new Template(\"Template.searchLogs\", (function() {\n  var view = this;\n  return HTML.DIV({\n    \"class\": \"grid-small grid-module dialog admin\"\n  }, HTML.Raw(\"\\n    <h2>Search Logs</h2>\\n      \"), HTML.TABLE(\"\\n        \", HTML.THEAD(\"\\n          \", HTML.TR(\"\\n            \", HTML.TH(\"Keyword\"), \"\\n            \", HTML.TH(\"Timestamp\"), \"\\n          \"), \"\\n        \"), \"\\n        \", HTML.TBODY(\"\\n        \", Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\".\"));\n  }, function() {\n    return [ \"\\n          \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"isNewDate\"));\n    }, function() {\n      return [ \"\\n            \", HTML.TR({\n        \"class\": \"search-date-header\"\n      }, \"\\n              \", HTML.TH({\n        colspan: \"2\"\n      }, \"\\n                \", HTML.SPAN({\n        \"class\": \"search-date\"\n      }, Blaze.View(function() {\n        return Spacebars.mustache(view.lookup(\"getDate\"));\n      })), \"\\n                \", HTML.SPAN({\n        \"class\": \"search-count\"\n      }, Blaze.View(function() {\n        return Spacebars.mustache(view.lookup(\"searchCount\"));\n      })), \"\\n              \"), \"\\n            \"), \"\\n          \" ];\n    }), \"\\n          \", HTML.TR(\"\\n            \", HTML.TD(Blaze.View(function() {\n      return Spacebars.mustache(view.lookup(\"keyword\"));\n    })), \"\\n            \", HTML.TD(Blaze.View(function() {\n      return Spacebars.mustache(view.lookup(\"getTime\"));\n    })), \"\\n          \"), \"\\n        \" ];\n  }), \"\\n      \"), \"\\n    \"), \"\\n    \", HTML.DIV({\n    \"class\": \"grid more-button\"\n  }, \"\\n      \", HTML.A({\n    \"class\": \"more-link\",\n    href: function() {\n      return Spacebars.mustache(view.lookup(\"loadMoreUrl\"));\n    }\n  }, Blaze.View(function() {\n    return Spacebars.mustache(view.lookup(\"i18n\"), \"Load more\");\n  })), \"\\n    \"), \"\\n  \");\n}));\n","Meteor.startup(function () {\n  Template[getTemplate('searchLogs')].helpers({\n    getTime: function () {\n      return moment(this.timestamp).format(\"HH:mm:ss\");\n    },\n    getDate: function () {\n      currentDate = moment(this.timestamp).format(\"MMMM DD\");\n      return currentDate;\n    },\n    searchCount: function () {\n      // TODO: doesn't work properly with \"load more\"\n      var after = moment(this.timestamp).startOf('day').valueOf(),\n          before = moment(this.timestamp).endOf('day').valueOf();\n\n      return Searches.find({\n        timestamp: {\n          $gte: after, \n          $lt: before\n        }\n      }).count();\n    },\n    isNewDate: function () {\n      return (typeof currentDate === 'undefined') ? true : (currentDate !== moment(this.timestamp).format(\"MMMM DD\"));\n    },\n    loadMoreUrl: function(){\n      var count = parseInt(Session.get('logsLimit')) + 100;\n      return '/logs/' + count;\n    },  \n  });\n});"]}