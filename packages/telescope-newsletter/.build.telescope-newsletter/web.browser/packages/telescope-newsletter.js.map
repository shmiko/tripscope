{"version":3,"file":"/packages/telescope-newsletter.js","sources":["telescope-newsletter/lib/newsletter.js","telescope-newsletter/lib/client/templates/newsletter_banner.html","telescope-newsletter/lib/client/templates/newsletter_banner.js"],"names":[],"mappings":";;;;;;;;AAAA,mC;AACA,O;AACA,iB;AACA,kB;AACA,I;AACA,c;AACA,e;AACA,kB;AACA,I;AACA,W;AACA,iB;AACA,kB;AACA,I;AACA,W;AACA,iB;AACA,kB;AACA,I;AACA,U;AACA,mB;AACA,kB;AACA,K;AACA,Y;AACA,iB;AACA,kB;AACA,K;AACA,G;;AAEA,gD;AACA,wB;AACA,G;;AAEA,qB;AACA,G;AACA,gC;AACA,qB;AACA,iB;AACA,oB;AACA,K;AACA,G;AACA,E;;AAEA,W;;AAEA,2G;;AAEA,kB;AACA,6B;AACA,mB;AACA,kB;AACA,mB;AACA,+B;AACA,e;AACA,0B;AACA,qE;AACA,K;AACA,G;AACA,C;AACA,qC;;AAEA,uB;AACA,kC;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,yB;AACA,K;AACA,G;AACA,C;AACA,0C;;AAEA,uB;AACA,kC;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,0B;AACA,6D;AACA,K;AACA,G;AACA,C;AACA,0C;;AAEA,0B;AACA,qC;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,yB;AACA,K;AACA,G;AACA,C;AACA,6C;;AAEA,2B;AACA,sC;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,0B;AACA,0E;AACA,gB;AACA,S;AACA,mB;AACA,4B;AACA,U;AACA,S;AACA,mB;AACA,+C;AACA,U;AACA,S;AACA,mB;AACA,sC;AACA,U;AACA,S;AACA,mB;AACA,wC;AACA,U;AACA,S;AACA,mB;AACA,wC;AACA,S;AACA,O;AACA,K;AACA,G;AACA,C;AACA,8C;;AAEA,gG;AACA,4C;AACA,U;AACA,W;AACA,oC;AACA,iB;AACA,0B;AACA,O;AACA,O;AACA,4C;AACA,I;AACA,C;;AAEA,kB;AACA,8B;AACA,G;;;;;;;;;;;;;;;;;;;ACjJA,yC;AACA,sF;AACA,kB;AACA,8B;AACA,qD;AACA,iB;AACA,iC;AACA,mD;AACA,oD;AACA,mC;AACA,sD;AACA,yD;AACA,oE;AACA,2D;AACA,mB;AACA,2C;AACA,oC;AACA,sB;AACA,iC;AACA,yB;AACA,mC;AACA,yC;AACA,oC;AACA,8B;AACA,iB;AACA,mC;AACA,4C;AACA,sC;AACA,uD;AACA,gB;AACA,mC;AACA,iC;AACA,K;AACA,I;;;;;;;;;;;;;;;;;;;AClCA,uC;AACA,iD;AACA,2F;AACA,kC;AACA,kF;AACA,oB;AACA,U;AACA,C;;AAEA,iC;AACA,uD;AACA,sB;AACA,8D;AACA,0C;AACA,U;AACA,mB;AACA,yC;AACA,K;AACA,K;AACA,C;;AAEA,4B;AACA,qD;AACA,2B;AACA,iC;AACA,M;AACA,iC;AACA,2B;AACA,M;AACA,6B;AACA,qC;AACA,S;AACA,oD;AACA,mC;AACA,wD;AACA,6C;AACA,2E;AACA,uF;AACA,Q;AACA,qB;AACA,Y;AACA,oB;AACA,O;AACA,K;AACA,K;;AAEA,oD;AACA,8C;AACA,yB;AACA,4C;AACA,wB;AACA,wC;AACA,+E;AACA,6C;AACA,oB;AACA,+B;AACA,sC;AACA,gB;AACA,gC;AACA,kC;AACA,W;AACA,W;AACA,Y;AACA,iD;AACA,mB;AACA,8C;AACA,gB;AACA,S;AACA,wC;AACA,gF;AACA,6C;AACA,oB;AACA,+B;AACA,sC;AACA,gB;AACA,gC;AACA,kC;AACA,W;AACA,W;AACA,O;AACA,gD;AACA,kF;AACA,M;AACA,+C;AACA,8C;AACA,sB;AACA,yB;AACA,O;AACA,K;AACA,G","sourcesContent":["campaignSchema = new SimpleSchema({\n _id: {\n    type: String,\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    optional: true\n  },\n  sentAt: {\n    type: String,\n    optional: true\n  },\n  status: {\n    type: String,\n    optional: true\n  },\n  posts: {\n    type: [String],\n    optional: true\n  }, \n  webHits: {\n    type: Number,\n    optional: true\n  }, \n});\n\nCampaigns = new Meteor.Collection(\"campaigns\", {\n  schema: campaignSchema\n});\n\naddToPostSchema.push(\n  {\n    propertyName: 'scheduledAt',\n    propertySchema: {\n      type: Date,\n      optional: true\n    }\n  }\n);\n\n// Settings\n\n// note for next two fields: need to add a way to tell app not to publish field to client except for admins\n\nvar showBanner = {\n  propertyName: 'showBanner',\n  propertySchema: {\n    type: Boolean,\n    optional: true,\n    label: 'Newsletter banner',\n    autoform: {\n      group: 'newsletter',\n      instructions: 'Show newsletter sign-up form on the front page.'\n    }\n  }\n}\naddToSettingsSchema.push(showBanner);\n\nvar mailChimpAPIKey = {\n  propertyName: 'mailChimpAPIKey',\n  propertySchema: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'newsletter'\n    }\n  }\n}\naddToSettingsSchema.push(mailChimpAPIKey);\n\nvar mailChimpListId = {\n  propertyName: 'mailChimpListId',\n  propertySchema: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'newsletter',\n      instructions: 'The ID of the list you want to send to.'\n    }\n  }\n}\naddToSettingsSchema.push(mailChimpListId);\n\nvar postsPerNewsletter = {\n  propertyName: 'postsPerNewsletter',\n  propertySchema: {\n    type: Number,\n    optional: true,\n    autoform: {\n      group: 'newsletter'\n    }\n  }\n}\naddToSettingsSchema.push(postsPerNewsletter);\n\nvar newsletterFrequency = {\n  propertyName: 'newsletterFrequency',\n  propertySchema: {\n    type: Number,\n    optional: true,\n    autoform: {\n      group: 'newsletter',\n      instructions: 'Changes require restarting your app to take effect.',\n      options: [\n        {\n          value: 1,\n          label: 'Every Day'\n        },\n        {\n          value: 2,\n          label: 'Mondays, Wednesdays, Fridays'\n        },\n        {\n          value: 3,\n          label: 'Mondays & Thursdays'\n        },\n        {\n          value: 7,\n          label: 'Once a week (Mondays)'\n        },\n        {\n          value: 0,\n          label: \"Don't send newsletter\"\n        }\n      ]\n    }\n  }\n}\naddToSettingsSchema.push(newsletterFrequency);\n\n// create new \"campaign\" lens for all posts from the past X days that haven't been scheduled yet\nviewParameters.campaign = function (terms) {\n  return {\n    find: {\n      scheduledAt: {$exists: false},\n      postedAt: {\n        $gte: terms.after \n      }\n    }, \n    options: {sort: {sticky: -1, score: -1}}\n  };\n}\n\nheroModules.push({\n  template: 'newsletterBanner'\n});","\nTemplate.__checkName(\"newsletterBanner\");\nTemplate[\"newsletterBanner\"] = new Template(\"Template.newsletterBanner\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"showBanner\"));\n  }, function() {\n    return [ \"\\n    \", HTML.DIV({\n      \"class\": \"newsletter-banner grid-module grid\"\n    }, \"\\n      \", HTML.FORM(\"\\n        \", HTML.H4({\n      \"class\": \"newsletter-tagline\"\n    }, \"Receive the best of \", Blaze.View(function() {\n      return Spacebars.mustache(view.lookup(\"siteName\"));\n    }), \" right in your inbox\"), \"\\n        \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"isNotConnected\"));\n    }, function() {\n      return [ \"\\n          \", HTML.INPUT({\n        \"class\": \"newsletter-email\",\n        type: \"email\",\n        placeholder: \"Your Email\"\n      }), \"\\n        \" ];\n    }), \"\\n        \", HTML.BUTTON({\n      \"class\": \"button newsletter-button\"\n    }, \"Get Newsletter\", HTML.SPAN({\n      \"class\": \"button-loader\"\n    }, HTML.IMG({\n      src: \"/img/loading-balls.svg\"\n    }))), \"\\n      \"), \"\\n      \", HTML.H4({\n      \"class\": \"newsletter-subscribed\"\n    }, \"Thanks for subscribing!\"), \"\\n      \", HTML.A({\n      href: \"#\",\n      \"class\": \"newsletter-dismiss\"\n    }, \"Ã—\"), \"\\n    \"), \"\\n  \" ];\n  });\n}));\n","var confirmSubscription = function () {\n  $('.newsletter-banner form').css('opacity', 0);\n  $('.newsletter-banner .newsletter-subscribed').css('display', 'block').css('opacity', 1);\n  Meteor.setInterval(function () {\n    // required because otherwise banner disappears immediately after confirmation\n    dismissBanner();\n  }, 2000)\n}\n\nvar dismissBanner = function () {\n  $('.newsletter-banner').fadeOut('fast', function () {\n    if(Meteor.user()){\n      // if user is connected, change setting in their account\n      setUserSetting('showBanner', false);\n    }else{\n      // set cookie\n      Cookie.set('showBanner', \"no\");    \n    }\n  });\n}\n\nMeteor.startup(function () {\n  Template[getTemplate('newsletterBanner')].helpers({\n    siteName: function () {\n      return getSetting('title');\n    },\n    isNotConnected: function () {\n      return !Meteor.user()\n    },\n    showBanner: function () {\n      // note: should not be reactive\n      if(\n            getSetting('showBanner', false) == false\n        ||  !canView(Meteor.user())\n        ||  Router.current().location.get().path != '/' \n        ||  Cookie.get('showBanner') == \"no\" \n        ||  (Meteor.user() && getUserSetting('showBanner', true) == false) \n        ||  (Meteor.user() && getUserSetting('subscribedToNewsletter', false) == true) \n      ){\n        return false;\n      }else{\n        return true;\n      }\n    }\n  });\n\n  Template[getTemplate('newsletterBanner')].events({\n    'click .newsletter-button': function (e) {\n      e.preventDefault();\n      var $banner = $('.newsletter-banner');\n      if(Meteor.user()){\n        $banner.addClass('show-loader');\n        Meteor.call('addCurrentUserToMailChimpList', function (error, result) {\n          $banner.removeClass('show-loader');\n          if(error){\n            console.log(error);\n            throwError(error.message);\n          }else{\n            console.log(result);\n            confirmSubscription();\n          }\n        });\n      }else{\n        var email = $('.newsletter-email').val();\n        if(!email){\n          alert('Please fill in your email.');\n          return\n        }\n        $banner.addClass('show-loader');\n        Meteor.call('addEmailToMailChimpList', email, function (error, result) {\n          $banner.removeClass('show-loader');\n          if(error){\n            console.log(error);\n            throwError(error.message);\n          }else{\n            console.log(result);\n            confirmSubscription();\n          }\n        });\n      }\n      // $('body').addClass('showing-lightbox');\n      // $(e.target).parents('.post').find('.post-video-lightbox').fadeIn('fast');\n    },\n    'click .newsletter-dismiss': function (e) {\n      $('.newsletter-banner').fadeOut('fast');\n      dismissBanner();\n      e.preventDefault();\n    }  \n  });\n});"]}