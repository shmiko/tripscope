{"version":3,"file":"/packages/telescope-notifications.js","sources":["telescope-notifications/lib/notifications.js","telescope-notifications/lib/herald.js","telescope-notifications/lib/server/notifications-server.js","telescope-notifications/lib/server/routes.js"],"names":[],"mappings":";;;;;;;;AAAA,oD;AACA,qD;AACA,sB;AACA,2G;AACA,qB;AACA,O;AACA,wE;AACA,G;AACA,c;AACA,G;;AAEA,0D;AACA,2D;AACA,sB;;AAEA,kD;AACA,6B;AACA,6C;AACA,qD;;AAEA,4B;AACA,kE;AACA,+C;AACA,M;;AAEA,wB;AACA,sB;AACA,4D;AACA,kE;;AAEA,wF;;AAEA,2B;AACA,uF;AACA,oC;AACA,gG;;AAEA,6B;AACA,mG;AACA,yE;AACA,gG;;AAEA,U;AACA,qB;AACA,iD;AACA,kC;AACA,gG;AACA,K;AACA,G;;AAEA,iB;AACA,G;;AAEA,0B;AACA,qC;AACA,mB;AACA,kB;AACA,mB;AACA,uB;AACA,e;AACA,6B;AACA,mG;AACA,K;AACA,G;AACA,C;AACA,6C;;;;;;;;;;;;;;;;;;;ACjEA,4B;AACA,E;AACA,0B;AACA,2B;AACA,0B;AACA,K;;AAEA,8E;AACA,+C;AACA,4C;AACA,U;AACA,2C;AACA,I;AACA,G;;AAEA,4C;AACA,0B;AACA,mE;AACA,iC;AACA,6D;AACA,yF;AACA,Q;AACA,C;;AAEA,iD;AACA,kD;AACA,Y;AACA,+B;AACA,U;AACA,4C;AACA,G;AACA,C;;AAEA,oC;AACA,kD;AACA,Y;AACA,6B;AACA,U;AACA,0B;AACA,K;AACA,C;;AAEA,8B;AACA,U;AACA,Y;AACA,oC;AACA,6C;AACA,+E;AACA,2E;AACA,iD;AACA,O;AACA,K;AACA,G;AACA,0D;AACA,G;;AAEA,iC;AACA,U;AACA,e;AACA,Y;AACA,+B;AACA,K;AACA,I;AACA,Y;AACA,8B;AACA,uD;AACA,8D;AACA,U;AACA,K;AACA,I;AACA,c;AACA,6B;AACA,uD;AACA,M;AACA,iC;AACA,2C;AACA,M;AACA,yB;AACA,0C;AACA,M;AACA,4B;AACA,kC;AACA,M;AACA,sB;AACA,2C;AACA,K;AACA,G;AACA,G;;AAEA,+B;AACA,U;AACA,e;AACA,Y;AACA,+B;AACA,K;AACA,I;AACA,Y;AACA,8B;AACA,sD;AACA,4D;AACA,U;AACA,K;AACA,I;AACA,c;AACA,6B;AACA,uD;AACA,M;AACA,iC;AACA,2C;AACA,M;AACA,yB;AACA,0C;AACA,M;AACA,4B;AACA,kC;AACA,M;AACA,sB;AACA,iD;AACA,K;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACxHA,oC;AACA,6D;AACA,E;;AAEA,6E;AACA,kD;AACA,E;AACA,wB;AACA,oC;AACA,0C;AACA,E;AACA,+B;AACA,oB;AACA,sE;AACA,iC;AACA,Y;;AAEA,sB;AACA,8D;AACA,mC;AACA,a;;AAEA,Y;AACA,Y;AACA,G;;AAEA,qD;AACA,+B;AACA,kD;AACA,6D;AACA,+B;AACA,K;;AAEA,iC;;AAEA,qE;AACA,kD;;AAEA,U;AACA,qB;AACA,c;AACA,G;AACA,E;;AAEA,gB;AACA,mC;AACA,8E;AACA,iF;AACA,wD;AACA,a;AACA,kD;AACA,e;AACA,4C;AACA,4C;AACA,+C;AACA,6C;AACA,S;AACA,S;AACA,kB;AACA,K;AACA,iB;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;;AC9DA,4B;AACA,E;AACA,uB;;AAEA,4C;AACA,yB;AACA,oB;AACA,wB;AACA,+D;AACA,sE;AACA,qD;AACA,0B;AACA,K;AACA,K;;AAEA,G","sourcesContent":["// add new post notification callback on post submit\npostAfterSubmitMethodCallbacks.push(function (post) {\n  if(Meteor.isServer){\n    var userIds = Meteor.users.find({'profile.notifications.posts': 1}, {fields: {}}).map(function (user) {\n      return user._id\n    });\n    Herald.createNotification(userIds, {courier: 'newPost', data: post})\n  }\n  return post;\n});\n\n// add new comment notification callback on comment submit\ncommentAfterSubmitMethodCallbacks.push(function (comment) {\n  if(Meteor.isServer){\n\n    var parentCommentId = comment.parentCommentId;\n    var user = Meteor.user();\n    var post = Posts.findOne(comment.postId);\n    var postUser = Meteor.users.findOne(post.userId);\n\n    var notificationData = {\n      comment: _.pick(comment, '_id', 'userId', 'author', 'body'),\n      post: _.pick(post, '_id', 'title', 'url')\n    };\n\n    if(parentCommentId){\n      // child comment\n      var parentComment = Comments.findOne(parentCommentId);\n      var parentUser = Meteor.users.findOne(parentComment.userId);\n\n      notificationData.parentComment = _.pick(parentComment, '_id', 'userId', 'author');\n\n      // reply notification\n      // do not notify users of their own actions (i.e. they're replying to themselves)\n      if(parentUser._id != user._id)\n        Herald.createNotification(parentUser._id, {courier: 'newReply', data: notificationData})\n\n      // comment notification\n      // if the original poster is different from the author of the parent comment, notify them too\n      if(postUser._id != user._id && parentComment.userId != post.userId)\n        Herald.createNotification(postUser._id, {courier: 'newComment', data: notificationData})\n\n    }else{\n      // root comment\n      // don't notify users of their own comments\n      if(postUser._id != user._id)\n        Herald.createNotification(postUser._id, {courier: 'newComment', data: notificationData})\n    }\n  }\n\n  return comment;\n});\n\nvar emailNotifications = {\n  propertyName: 'emailNotifications',\n  propertySchema: {\n    type: Boolean,\n    optional: true,\n    defaultValue: true,\n    autoform: {\n      group: 'notifications',\n      instructions: 'Enable email notifications for new posts and new comments (requires restart).'\n    }\n  }\n}\naddToSettingsSchema.push(emailNotifications);\n","Meteor.startup(function () {\n  \n  Herald.collection.deny({\n    update: ! can.editById,\n    remove: ! can.editById\n  });\n\n  // disable all email notifications when \"emailNotifications\" is set to false\n  if (getSetting('emailNotifications', true)) {\n    Herald.settings.overrides.email = false;\n  } else {\n    Herald.settings.overrides.email = true;\n  };\n});\n\nvar commentEmail = function (userToNotify) {\n  var notification = this;\n  // put in setTimeout so it doesn't hold up the rest of the method\n  Meteor.setTimeout(function () {\n    notificationEmail = buildEmailNotification(notification);\n    sendEmail(getEmail(userToNotify), notificationEmail.subject, notificationEmail.html);\n  }, 1);\n}\n\nvar getCommenterProfileUrl = function (comment) {\n  var user = Meteor.users.findOne(comment.userId);\n  if(user) {\n    return getProfileUrl(user);\n  } else {\n    return getProfileUrlById(comment.userId)\n  }\n}\n\nvar getAuthor = function (comment) {\n  var user = Meteor.users.findOne(comment.userId);\n  if(user) {\n    return getUserName(user);\n  } else {\n    return comment.author;\n  }  \n}\n\nHerald.addCourier('newPost', {\n  media: {\n    email: {\n      emailRunner: function (user) {\n        var p = getPostProperties(this.data);\n        var subject = p.postAuthorName+' has created a new post: '+p.postTitle;\n        var html = buildEmailTemplate(getEmailTemplate('emailNewPost')(p));\n        sendEmail(getEmail(user), subject, html);\n      }\n    }\n  }\n  // message: function (user) { return 'email template?' }\n});\n\nHerald.addCourier('newComment', {\n  media: {\n    onsite: {},\n    email: {\n      emailRunner: commentEmail\n    }\n  },\n  message: {\n    default: function (user) {\n       return Blaze.toHTML(Blaze.With(this, function(){\n        return Template[getTemplate('notificationNewComment')]\n      }));\n    }\n  },\n  transform: {\n    profileUrl: function () {\n      return getCommenterProfileUrl(this.data.comment);\n    },\n    postCommentUrl: function () {\n      return '/posts/'+ this.data.post._id;\n    },\n    author: function () {\n      return getAuthor(this.data.comment);\n    },\n    postTitle: function () {\n      return this.data.post.title;\n    },\n    url: function () {\n      return /comments/ + this.comment._id;\n    }\n  }\n});\n\nHerald.addCourier('newReply', {\n  media: {\n    onsite: {},\n    email: {\n      emailRunner: commentEmail\n    }\n  },\n  message: {\n    default: function (user) {\n      return Blaze.toHTML(Blaze.With(this, function(){\n        return Template[getTemplate('notificationNewReply')]\n      }));\n    }\n  },\n  transform: {\n    profileUrl: function () {\n      return getCommenterProfileUrl(this.data.comment);\n    },\n    postCommentUrl: function () {\n      return '/posts/'+ this.data.post._id;\n    },\n    author: function () {\n      return getAuthor(this.data.comment);\n    },\n    postTitle: function () {\n      return this.data.post.title;\n    },\n    url: function () {\n      return /comments/ + this.parentComment._id;\n    }\n  }\n});\n","getUnsubscribeLink = function(user){\n  return Meteor.absoluteUrl()+'unsubscribe/'+user.email_hash;\n};\n\n// given a notification, return the correct subject and html to send an email\nbuildEmailNotification = function (notification) {\n  \n  var subject, template;\n  var post = notification.data.post;\n  var comment = notification.data.comment;\n  \n  switch(notification.courier){\n    case 'newReply':\n      subject = 'Someone replied to your comment on \"'+post.title+'\"';\n      template = 'emailNewReply';\n      break;\n\n    case 'newComment':\n      subject = 'A new comment on your post \"'+post.title+'\"';\n      template = 'emailNewComment';\n      break; \n\n    default:\n      break;\n  }\n\n  var emailProperties = _.extend(notification.data, {\n    body: marked(comment.body),\n    profileUrl: getProfileUrlById(comment.userId),\n    postCommentUrl: getPostCommentUrl(post._id, comment._id),\n    postLink: getPostLink(post)\n  });\n\n  // console.log(emailProperties)\n\n  var notificationHtml = getEmailTemplate(template)(emailProperties);\n  var html = buildEmailTemplate(notificationHtml);\n\n  return {\n    subject: subject,\n    html: html\n  }\n};\n\nMeteor.methods({\n  unsubscribeUser : function(hash){\n    // TO-DO: currently, if you have somebody's email you can unsubscribe them\n    // A user-specific salt should be added to the hashing method to prevent this\n    var user = Meteor.users.findOne({email_hash: hash});\n    if(user){\n      var update = Meteor.users.update(user._id, {\n        $set: {\n          'profile.notifications.users' : 0,\n          'profile.notifications.posts' : 0,\n          'profile.notifications.comments' : 0,\n          'profile.notifications.replies' : 0\n        }\n      });\n      return true;\n    }\n    return false;\n  }\n});\n\n","Meteor.startup(function () {\n  \n  // Notification email\n\n  Router.route('/email/notification/:id?', {\n    name: 'notification',\n    where: 'server',\n    action: function() {\n      var notification = Notifications.findOne(this.params.id);\n      var notificationContents = buildEmailNotification(notification);\n      this.response.write(notificationContents.html);\n      this.response.end();\n    }\n  });\n\n});"]}